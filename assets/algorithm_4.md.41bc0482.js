import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.12b7deed.js";const p=JSON.parse('{"title":"重建序列","description":"","frontmatter":{"title":"重建序列","head":[["meta",{"name":"og:title","content":"重建序列 | VitePress"}]]},"headers":[],"relativePath":"algorithm/4.md","filePath":"algorithm/4.md","lastUpdated":1698918793000}'),e={name:"algorithm/4.md"},o=l(`<h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>给定一个长度为 n 的整数数组 nums ，其中 nums 是范围为 [1，n] 的整数的排列。还提供了一个 2D 整数数组  sequences ，其中  sequences[i]  是  nums  的子序列。</p><p>检查 nums 是否是唯一的最短超序列 。最短超序列是长度最短的序列，并且所有序列 sequences[i]都是它的子序列。对于给定的数组  sequences ，可能存在多个有效的 超序列 。</p><p>例如，对于  sequences = [[1,2],[1,3]] ，有两个最短的 超序列 ，[1,2,3] 和 [1,3,2] 。 而对于  sequences = [[1,2],[1,3],[1,2,3]] ，唯一可能的最短超序列是 [1,2,3] 。[1,2,3,4] 是可能的超序列，但不是最短的。 如果 nums 是序列的唯一最短 超序列 ，则返回 true ，否则返回 false 。 子序列 是一个可以通过从另一个序列中删除一些元素或不删除任何元素，而不改变其余元素的顺序的序列。</p><p>示例 1：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">输入：nums = [1,2,3], sequences = [[1,2],[1,3]]</span></span>
<span class="line"><span style="color:#e1e4e8;">输出：false</span></span>
<span class="line"><span style="color:#e1e4e8;">解释：有两种可能的超序列：[1,2,3]和[1,3,2]。</span></span>
<span class="line"><span style="color:#e1e4e8;">序列 [1,2] 是[1,2,3]和[1,3,2]的子序列。</span></span>
<span class="line"><span style="color:#e1e4e8;">序列 [1,3] 是[1,2,3]和[1,3,2]的子序列。</span></span>
<span class="line"><span style="color:#e1e4e8;">因为 nums 不是唯一最短的超序列，所以返回false。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">输入：nums = [1,2,3], sequences = [[1,2],[1,3]]</span></span>
<span class="line"><span style="color:#24292e;">输出：false</span></span>
<span class="line"><span style="color:#24292e;">解释：有两种可能的超序列：[1,2,3]和[1,3,2]。</span></span>
<span class="line"><span style="color:#24292e;">序列 [1,2] 是[1,2,3]和[1,3,2]的子序列。</span></span>
<span class="line"><span style="color:#24292e;">序列 [1,3] 是[1,2,3]和[1,3,2]的子序列。</span></span>
<span class="line"><span style="color:#24292e;">因为 nums 不是唯一最短的超序列，所以返回false。</span></span></code></pre></div><p>示例 2：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">输入：nums = [1,2,3], sequences = [[1,2]]</span></span>
<span class="line"><span style="color:#e1e4e8;">输出：false</span></span>
<span class="line"><span style="color:#e1e4e8;">解释：最短可能的超序列为 [1,2]。</span></span>
<span class="line"><span style="color:#e1e4e8;">序列 [1,2] 是它的子序列：[1,2]。</span></span>
<span class="line"><span style="color:#e1e4e8;">因为 nums 不是最短的超序列，所以返回 false。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">输入：nums = [1,2,3], sequences = [[1,2]]</span></span>
<span class="line"><span style="color:#24292e;">输出：false</span></span>
<span class="line"><span style="color:#24292e;">解释：最短可能的超序列为 [1,2]。</span></span>
<span class="line"><span style="color:#24292e;">序列 [1,2] 是它的子序列：[1,2]。</span></span>
<span class="line"><span style="color:#24292e;">因为 nums 不是最短的超序列，所以返回 false。</span></span></code></pre></div><p>示例 3：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">输入：nums = [1,2,3], sequences = [[1,2],[1,3],[2,3]]</span></span>
<span class="line"><span style="color:#e1e4e8;">输出：true</span></span>
<span class="line"><span style="color:#e1e4e8;">解释：最短可能的超序列为[1,2,3]。</span></span>
<span class="line"><span style="color:#e1e4e8;">序列 [1,2] 是它的一个子序列：[1,2,3]。</span></span>
<span class="line"><span style="color:#e1e4e8;">序列 [1,3] 是它的一个子序列：[1,2,3]。</span></span>
<span class="line"><span style="color:#e1e4e8;">序列 [2,3] 是它的一个子序列：[1,2,3]。</span></span>
<span class="line"><span style="color:#e1e4e8;">因为 nums 是唯一最短的超序列，所以返回 true。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">输入：nums = [1,2,3], sequences = [[1,2],[1,3],[2,3]]</span></span>
<span class="line"><span style="color:#24292e;">输出：true</span></span>
<span class="line"><span style="color:#24292e;">解释：最短可能的超序列为[1,2,3]。</span></span>
<span class="line"><span style="color:#24292e;">序列 [1,2] 是它的一个子序列：[1,2,3]。</span></span>
<span class="line"><span style="color:#24292e;">序列 [1,3] 是它的一个子序列：[1,2,3]。</span></span>
<span class="line"><span style="color:#24292e;">序列 [2,3] 是它的一个子序列：[1,2,3]。</span></span>
<span class="line"><span style="color:#24292e;">因为 nums 是唯一最短的超序列，所以返回 true。</span></span></code></pre></div><p>提示：</p><ul><li>n == nums.length</li><li>1 &lt;= n &lt;= 10 的 4 次方</li><li>nums  是  [1, n]  范围内所有整数的排列</li><li>1 &lt;= sequences.length &lt;= 10 的 4 次方</li><li>1 &lt;= sequences[i].length &lt;= 10 的 4 次方</li><li>1 &lt;= sum(sequences[i].length) &lt;= 10 的 5 次方</li><li>1 &lt;= sequences[i][j] &lt;= n</li><li>sequences  的所有数组都是 唯一 的</li><li>sequences[i]  是  nums 的一个子序列</li></ul><h2 id="理解题目" tabindex="-1">理解题目 <a class="header-anchor" href="#理解题目" aria-label="Permalink to &quot;理解题目&quot;">​</a></h2><p>sequences 是二维数组，nums 是一维数组。校验  sequences 二维数组中组成的最短序列与 nums 是一致的且唯一的，则返回 true ，否则返回 false。</p><h2 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;">​</a></h2><p>检查每个相邻关系是否都出现过，只有都出现了才是唯一的。</p><h2 id="答案" tabindex="-1">答案 <a class="header-anchor" href="#答案" aria-label="Permalink to &quot;答案&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sequenceReconstruction</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">nums</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">[], </span><span style="color:#FFAB70;">sequences</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">[][])</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">prev</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">next</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">number</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//1 &lt;= n &lt;= 10的4次方</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> prev </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> next</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> seq </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> sequences){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">seq.</span><span style="color:#79B8FF;">length</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            s.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;">(seq[i],seq[i</span><span style="color:#F97583;">++</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]))</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        len </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> seq</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">nums.</span><span style="color:#79B8FF;">length</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;">(nums[i],nums[i</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]))){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s.size </span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> nums.</span><span style="color:#79B8FF;">length</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sequenceReconstruction</span><span style="color:#24292E;">(</span><span style="color:#E36209;">nums</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">[], </span><span style="color:#E36209;">sequences</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">[][])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">prev</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">,</span><span style="color:#E36209;">next</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">number</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//1 &lt;= n &lt;= 10的4次方</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> prev </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> next</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">s</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> seq </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> sequences){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">seq.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            s.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(seq[i],seq[i</span><span style="color:#D73A49;">++</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]))</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        len </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> seq</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">nums.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(nums[i],nums[i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]))){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s.size </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> nums.</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,18),c=[o];function t(y,E,i,u,F,d){return n(),a("div",null,c)}const r=s(e,[["render",t]]),m=Object.freeze(Object.defineProperty({__proto__:null,__pageData:p,default:r},Symbol.toStringTag,{value:"Module"}));export{m as _,p as __pageData,r as default};
