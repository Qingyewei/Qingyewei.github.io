import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.12b7deed.js";const o=JSON.parse('{"title":"生成每种字符都是奇数个的字符串","description":"","frontmatter":{"title":"生成每种字符都是奇数个的字符串","head":[["meta",{"name":"og:title","content":"生成每种字符都是奇数个的字符串 | VitePress"}]]},"headers":[],"relativePath":"algorithm/8.md","filePath":"algorithm/8.md","lastUpdated":1698918793000}'),l={name:"algorithm/8.md"},e=p(`<h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>给你一个整数 n，请你返回一个含 n 个字符的字符串，其中每种字符在该字符串中都恰好出现 奇数次 。</p><p>返回的字符串必须只含小写英文字母。如果存在多个满足题目要求的字符串，则返回其中任意一个即可。</p><p>示例 1：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">输入：n = 4</span></span>
<span class="line"><span style="color:#e1e4e8;">输出：&quot;pppz&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">解释：&quot;pppz&quot; 是一个满足题目要求的字符串，因为 &#39;p&#39; 出现 3 次，且 &#39;z&#39; 出现 1 次。当然，还有很多其他字符串也满足题目要求，比如：&quot;ohhh&quot; 和 &quot;love&quot;。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">输入：n = 4</span></span>
<span class="line"><span style="color:#24292e;">输出：&quot;pppz&quot;</span></span>
<span class="line"><span style="color:#24292e;">解释：&quot;pppz&quot; 是一个满足题目要求的字符串，因为 &#39;p&#39; 出现 3 次，且 &#39;z&#39; 出现 1 次。当然，还有很多其他字符串也满足题目要求，比如：&quot;ohhh&quot; 和 &quot;love&quot;。</span></span></code></pre></div><p>示例 2：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">输入：n = 2</span></span>
<span class="line"><span style="color:#e1e4e8;">输出：&quot;xy&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">解释：&quot;xy&quot; 是一个满足题目要求的字符串，因为 &#39;x&#39; 和 &#39;y&#39; 各出现 1 次。当然，还有很多其他字符串也满足题目要求，比如：&quot;ag&quot; 和 &quot;ur&quot;。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">输入：n = 2</span></span>
<span class="line"><span style="color:#24292e;">输出：&quot;xy&quot;</span></span>
<span class="line"><span style="color:#24292e;">解释：&quot;xy&quot; 是一个满足题目要求的字符串，因为 &#39;x&#39; 和 &#39;y&#39; 各出现 1 次。当然，还有很多其他字符串也满足题目要求，比如：&quot;ag&quot; 和 &quot;ur&quot;。</span></span></code></pre></div><p>示例 3：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">输入：n = 7</span></span>
<span class="line"><span style="color:#e1e4e8;">输出：&quot;holasss&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">输入：n = 7</span></span>
<span class="line"><span style="color:#24292e;">输出：&quot;holasss&quot;</span></span></code></pre></div><p>提示：</p><ul><li>1 &lt;= n &lt;= 500</li></ul><h2 id="理解题目" tabindex="-1">理解题目 <a class="header-anchor" href="#理解题目" aria-label="Permalink to &quot;理解题目&quot;">​</a></h2><p>接受一个n的整数，返回一个每个字符串都是奇数的字符串，长度为n</p><h2 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;">​</a></h2><p>n为奇数时可以用一个字符即可，本身就是奇数次； n为偶数时可以用两个字符，奇+奇=偶</p><h2 id="答案" tabindex="-1">答案 <a class="header-anchor" href="#答案" aria-label="Permalink to &quot;答案&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateTheString</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">n</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (n</span><span style="color:#F97583;">&amp;</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(n)</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(n</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&#39;b&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateTheString</span><span style="color:#24292E;">(</span><span style="color:#E36209;">n</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (n</span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">?</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(n)</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(n</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&#39;b&#39;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div>`,17),t=[e];function c(i,y,u,d,h,E){return a(),n("div",null,t)}const r=s(l,[["render",c]]),q=Object.freeze(Object.defineProperty({__proto__:null,__pageData:o,default:r},Symbol.toStringTag,{value:"Module"}));export{q as _,o as __pageData,r as default};
