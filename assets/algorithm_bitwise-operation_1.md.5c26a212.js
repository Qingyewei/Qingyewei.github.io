import{_ as s,o as a,c as e,Q as l}from"./chunks/framework.12b7deed.js";const n=JSON.parse('{"title":"解题基础","description":"","frontmatter":{"title":"解题基础","head":[["meta",{"name":"og:title","content":"解题基础 | VitePress"}]]},"headers":[],"relativePath":"algorithm/bitwise-operation/1.md","filePath":"algorithm/bitwise-operation/1.md","lastUpdated":1698918793000}'),p={name:"algorithm/bitwise-operation/1.md"},t=l(`<p>原文首发于语雀<a href="https://www.yuque.com/docs/share/9e284865-3ab3-4636-b143-04c0da237ca4?#%E3%80%8A%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8%E3%80%8B" target="_blank" rel="noreferrer">《位运算的算法应用》</a>。</p><h2 id="基本介绍" tabindex="-1">基本介绍 <a class="header-anchor" href="#基本介绍" aria-label="Permalink to &quot;基本介绍&quot;">​</a></h2><p>作为算法题的一个大类，位运算相关的题目常常出现在各大公司的面试/笔试题中，下面先说说位运算的基本原理。</p><p>位运算使得计算机可以直接对每个比特位进行计算，效率会非常的高。</p><p>在 JS 中，位运算会将操作数当作 32 位的二进制串进行计算，如果二进制串超过 32 位，则只保留最后的 32 位进行计算，如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">11100110111110100000000000000110000000000001 # 输入的二进制串</span></span>
<span class="line"><span style="color:#e1e4e8;">            10100000000000000110000000000001 # 实际使用的二进制</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">11100110111110100000000000000110000000000001 # 输入的二进制串</span></span>
<span class="line"><span style="color:#24292e;">            10100000000000000110000000000001 # 实际使用的二进制</span></span></code></pre></div><p>在 JS 中，位运算有 7 种运算符：</p><ol><li>按位与（a &amp; b）：在 a, b 的位表示中，每一个对应的位都为 1 则返回 1，否则返回 0</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># 15 &amp; 9 -&gt; 9</span></span>
<span class="line"><span style="color:#e1e4e8;">  0000 0000 0000 0000 0000 0000 0000 1111</span></span>
<span class="line"><span style="color:#e1e4e8;">&amp; 0000 0000 0000 0000 0000 0000 0000 1001</span></span>
<span class="line"><span style="color:#e1e4e8;">  ---------------------------------------</span></span>
<span class="line"><span style="color:#e1e4e8;">  0000 0000 0000 0000 0000 0000 0000 1000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># 15 &amp; 9 -&gt; 9</span></span>
<span class="line"><span style="color:#24292e;">  0000 0000 0000 0000 0000 0000 0000 1111</span></span>
<span class="line"><span style="color:#24292e;">&amp; 0000 0000 0000 0000 0000 0000 0000 1001</span></span>
<span class="line"><span style="color:#24292e;">  ---------------------------------------</span></span>
<span class="line"><span style="color:#24292e;">  0000 0000 0000 0000 0000 0000 0000 1000</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># 3&amp;-2 -&gt; 2</span></span>
<span class="line"><span style="color:#e1e4e8;">  0000 0000 0000 0000 0000 0000 1111 1110</span></span>
<span class="line"><span style="color:#e1e4e8;">&amp; 0000 0000 0000 0000 0000 0000 0000 0011</span></span>
<span class="line"><span style="color:#e1e4e8;">  ---------------------------------------</span></span>
<span class="line"><span style="color:#e1e4e8;">  0000 0000 0000 0000 0000 0000 0000 0010</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># 3&amp;-2 -&gt; 2</span></span>
<span class="line"><span style="color:#24292e;">  0000 0000 0000 0000 0000 0000 1111 1110</span></span>
<span class="line"><span style="color:#24292e;">&amp; 0000 0000 0000 0000 0000 0000 0000 0011</span></span>
<span class="line"><span style="color:#24292e;">  ---------------------------------------</span></span>
<span class="line"><span style="color:#24292e;">  0000 0000 0000 0000 0000 0000 0000 0010</span></span></code></pre></div><p>上面这个例子首先要求得-2的补码是多少，然后再去按位与。</p><blockquote><p>譬如现在我们以 3&amp;-2 来看一下计算步骤：</p><ol><li>将2(这里叫原码)转为二进制 ： 0000 0010</li><li>按位取反为 ： 1111 1101</li><li>末位加1得到补码 ： 1111 1110</li></ol></blockquote><ol start="2"><li>按位或（a | b）：在 a, b 的位表示中，每一个对应的位，只要有一个为 1 则返回 1，否则返回 0</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># 15 | 9 -&gt; 15</span></span>
<span class="line"><span style="color:#e1e4e8;">  0000 0000 0000 0000 0000 0000 0000 1111</span></span>
<span class="line"><span style="color:#e1e4e8;">| 0000 0000 0000 0000 0000 0000 0000 1001</span></span>
<span class="line"><span style="color:#e1e4e8;">  ---------------------------------------</span></span>
<span class="line"><span style="color:#e1e4e8;">  0000 0000 0000 0000 0000 0000 0000 1111</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># 15 | 9 -&gt; 15</span></span>
<span class="line"><span style="color:#24292e;">  0000 0000 0000 0000 0000 0000 0000 1111</span></span>
<span class="line"><span style="color:#24292e;">| 0000 0000 0000 0000 0000 0000 0000 1001</span></span>
<span class="line"><span style="color:#24292e;">  ---------------------------------------</span></span>
<span class="line"><span style="color:#24292e;">  0000 0000 0000 0000 0000 0000 0000 1111</span></span></code></pre></div><ol start="3"><li>按位异或（a ^ b）：在 a, b 的位表示中，每一个对应的位，两个不相同则返回 1，相同则返回 0</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># 15 ^ 9 -&gt; 6</span></span>
<span class="line"><span style="color:#e1e4e8;">  0000 0000 0000 0000 0000 0000 0000 1111</span></span>
<span class="line"><span style="color:#e1e4e8;">| 0000 0000 0000 0000 0000 0000 0000 1001</span></span>
<span class="line"><span style="color:#e1e4e8;">  ---------------------------------------</span></span>
<span class="line"><span style="color:#e1e4e8;">  0000 0000 0000 0000 0000 0000 0000 0110</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># 15 ^ 9 -&gt; 6</span></span>
<span class="line"><span style="color:#24292e;">  0000 0000 0000 0000 0000 0000 0000 1111</span></span>
<span class="line"><span style="color:#24292e;">| 0000 0000 0000 0000 0000 0000 0000 1001</span></span>
<span class="line"><span style="color:#24292e;">  ---------------------------------------</span></span>
<span class="line"><span style="color:#24292e;">  0000 0000 0000 0000 0000 0000 0000 0110</span></span></code></pre></div><ol start="4"><li>按位非（~a）：反转被操作数的位，即将每一位的 0 转为 1，1 转为 0</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># ~15 -&gt; -16</span></span>
<span class="line"><span style="color:#e1e4e8;">~ 0000 0000 0000 0000 0000 0000 0000 1111</span></span>
<span class="line"><span style="color:#e1e4e8;">  ---------------------------------------</span></span>
<span class="line"><span style="color:#e1e4e8;">  1111 1111 1111 1111 1111 1111 1111 0000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># ~15 -&gt; -16</span></span>
<span class="line"><span style="color:#24292e;">~ 0000 0000 0000 0000 0000 0000 0000 1111</span></span>
<span class="line"><span style="color:#24292e;">  ---------------------------------------</span></span>
<span class="line"><span style="color:#24292e;">  1111 1111 1111 1111 1111 1111 1111 0000</span></span></code></pre></div><blockquote><p>譬如现在我们以 ~3 来看一下计算步骤：</p><ol><li>将3(这里叫原码)转为二进制 ： 00000011</li><li>按位取反为 ： 11111100</li><li>发现符号位(即最高位)为1(表示负数)，负数的二进制保存方式为其补码形式</li><li>除符号位之外，按位取反 ： 10000011</li><li>末位加1得到补码 ： 10000100</li><li>转换为十进制为 ： -4</li></ol></blockquote><ol start="5"><li>左移（a &lt;&lt; b）：将 a 的二进制串向左移动 b 位，右边移入 0</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># 9 &lt;&lt; 2 -&gt; 36</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;&lt;  0000 0000 0000 0000 0000 0000 0000 1001</span></span>
<span class="line"><span style="color:#e1e4e8;">    ---------------------------------------</span></span>
<span class="line"><span style="color:#e1e4e8;">    0000 0000 0000 0000 0000 0000 0010 0100</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># 9 &lt;&lt; 2 -&gt; 36</span></span>
<span class="line"><span style="color:#24292e;">&lt;&lt;  0000 0000 0000 0000 0000 0000 0000 1001</span></span>
<span class="line"><span style="color:#24292e;">    ---------------------------------------</span></span>
<span class="line"><span style="color:#24292e;">    0000 0000 0000 0000 0000 0000 0010 0100</span></span></code></pre></div><ol start="6"><li>有符号右移（a &gt;&gt; b）：把 a 的二进制表示向右移动 b 位，向右被移出的位被丢弃，拷贝最左侧的位以填充左侧。这种右移由于保留最左侧的二进制位，因此可以保留数字原本的正负符号</li></ol><blockquote><p>-9的补码是11110111。</p><ol><li>原码是：10001001</li><li>反码是：11110110</li><li>9的正确二进制表示法是：00001001</li><li>补码计算方法：求得原码的反码；反码末位加1。</li><li>当要表示-9时候，先对9的原码取反，变成11110110，即反码，反码基础上加1为11110111，是-9的补码。</li></ol></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># 9 &gt;&gt; 2 -&gt; 2</span></span>
<span class="line"><span style="color:#e1e4e8;">&gt;&gt;  0000 0000 0000 0000 0000 0000 0000 1001</span></span>
<span class="line"><span style="color:#e1e4e8;">    ---------------------------------------</span></span>
<span class="line"><span style="color:#e1e4e8;">    0000 0000 0000 0000 0000 0000 0010 0010</span></span>
<span class="line"><span style="color:#e1e4e8;"># -9 &gt;&gt; 2 -&gt; -3</span></span>
<span class="line"><span style="color:#e1e4e8;">&gt;&gt;  1111 1111 1111 1111 1111 1111 1111 0111</span></span>
<span class="line"><span style="color:#e1e4e8;">    ---------------------------------------</span></span>
<span class="line"><span style="color:#e1e4e8;">    1111 1111 1111 1111 1111 1111 1111 1101</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># 9 &gt;&gt; 2 -&gt; 2</span></span>
<span class="line"><span style="color:#24292e;">&gt;&gt;  0000 0000 0000 0000 0000 0000 0000 1001</span></span>
<span class="line"><span style="color:#24292e;">    ---------------------------------------</span></span>
<span class="line"><span style="color:#24292e;">    0000 0000 0000 0000 0000 0000 0010 0010</span></span>
<span class="line"><span style="color:#24292e;"># -9 &gt;&gt; 2 -&gt; -3</span></span>
<span class="line"><span style="color:#24292e;">&gt;&gt;  1111 1111 1111 1111 1111 1111 1111 0111</span></span>
<span class="line"><span style="color:#24292e;">    ---------------------------------------</span></span>
<span class="line"><span style="color:#24292e;">    1111 1111 1111 1111 1111 1111 1111 1101</span></span></code></pre></div><ol start="7"><li>无符号右移（a &gt;&gt;&gt; b）：把 a 的二进制表示向右移动 b 位，向右被移出的位被丢弃，左边空出的位全部填充为 0。这种右移由于左侧直接补 0，因此生成的数字必然是非负数</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># 19 &gt;&gt;&gt; 2 -&gt; 4</span></span>
<span class="line"><span style="color:#e1e4e8;">&gt;&gt;&gt;  0000 0000 0000 0000 0000 0000 0001 0011</span></span>
<span class="line"><span style="color:#e1e4e8;">     ---------------------------------------</span></span>
<span class="line"><span style="color:#e1e4e8;">     0000 0000 0000 0000 0000 0000 0010 0010</span></span>
<span class="line"><span style="color:#e1e4e8;"># -19 &gt;&gt;&gt; 2 -&gt; 1073741819</span></span>
<span class="line"><span style="color:#e1e4e8;">&gt;&gt;&gt;  1111 1111 1111 1111 1111 1111 1110 1101</span></span>
<span class="line"><span style="color:#e1e4e8;">     ---------------------------------------</span></span>
<span class="line"><span style="color:#e1e4e8;">     0011 1111 1111 1111 1111 1111 1111 0011</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># 19 &gt;&gt;&gt; 2 -&gt; 4</span></span>
<span class="line"><span style="color:#24292e;">&gt;&gt;&gt;  0000 0000 0000 0000 0000 0000 0001 0011</span></span>
<span class="line"><span style="color:#24292e;">     ---------------------------------------</span></span>
<span class="line"><span style="color:#24292e;">     0000 0000 0000 0000 0000 0000 0010 0010</span></span>
<span class="line"><span style="color:#24292e;"># -19 &gt;&gt;&gt; 2 -&gt; 1073741819</span></span>
<span class="line"><span style="color:#24292e;">&gt;&gt;&gt;  1111 1111 1111 1111 1111 1111 1110 1101</span></span>
<span class="line"><span style="color:#24292e;">     ---------------------------------------</span></span>
<span class="line"><span style="color:#24292e;">     0011 1111 1111 1111 1111 1111 1111 0011</span></span></code></pre></div><h2 id="常用性质" tabindex="-1">常用性质 <a class="header-anchor" href="#常用性质" aria-label="Permalink to &quot;常用性质&quot;">​</a></h2><p>在使用位运算技巧解的算法题中，有以下这些常用的性质：</p><ol><li>a 与自身之间的操作</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a &amp; a = a</span></span>
<span class="line"><span style="color:#e1e4e8;">a | a = a</span></span>
<span class="line"><span style="color:#e1e4e8;">a ^ a = 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a &amp; a = a</span></span>
<span class="line"><span style="color:#24292e;">a | a = a</span></span>
<span class="line"><span style="color:#24292e;">a ^ a = 0</span></span></code></pre></div><ol start="2"><li>a 与 0 之间的操作</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a &amp; 0 = 0</span></span>
<span class="line"><span style="color:#e1e4e8;">a | 0 = a</span></span>
<span class="line"><span style="color:#e1e4e8;">a ^ 0 = a</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a &amp; 0 = 0</span></span>
<span class="line"><span style="color:#24292e;">a | 0 = a</span></span>
<span class="line"><span style="color:#24292e;">a ^ 0 = a</span></span></code></pre></div><ol start="3"><li>按位与、按位或的还原计算</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a | ( a &amp; b ) = a</span></span>
<span class="line"><span style="color:#e1e4e8;">a &amp; ( a | b ) = a</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a | ( a &amp; b ) = a</span></span>
<span class="line"><span style="color:#24292e;">a &amp; ( a | b ) = a</span></span></code></pre></div><ol start="4"><li>通过异或完成变量值交换</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a ^= b</span></span>
<span class="line"><span style="color:#e1e4e8;">b ^= a</span></span>
<span class="line"><span style="color:#e1e4e8;">a ^= b</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a ^= b</span></span>
<span class="line"><span style="color:#24292e;">b ^= a</span></span>
<span class="line"><span style="color:#24292e;">a ^= b</span></span></code></pre></div><ol start="5"><li>判断奇偶（通过 &amp; 1 取出最后一个二进制位以达到模 2 的效果）</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># 位运算效率更高</span></span>
<span class="line"><span style="color:#e1e4e8;">a &amp; 1 === a % 2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># 位运算效率更高</span></span>
<span class="line"><span style="color:#24292e;">a &amp; 1 === a % 2</span></span></code></pre></div><ol start="6"><li>比较两值是否相等（a ^ a === 0）</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a ^ b === 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a ^ b === 0</span></span></code></pre></div><ol start="7"><li>将第 i + 1 个二进制位设为 1</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a |= 1 &lt;&lt; i</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a |= 1 &lt;&lt; i</span></span></code></pre></div><ol start="8"><li>将第 i + 1 个二进制位设为 0</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a &amp;= ~(1 &lt;&lt; i)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a &amp;= ~(1 &lt;&lt; i)</span></span></code></pre></div><ol start="9"><li>取出第 i + 1 个二进制位上的数值</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a &amp; (1 &lt;&lt; i)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a &amp; (1 &lt;&lt; i)</span></span></code></pre></div><ol start="10"><li>在 a 第 i + 1 个二进制位，插入 b 对应位置的二进制位</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a |= 1 &lt;&lt; i</span></span>
<span class="line"><span style="color:#e1e4e8;">a &amp; (b &amp; 1 &lt;&lt; i)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a |= 1 &lt;&lt; i</span></span>
<span class="line"><span style="color:#24292e;">a &amp; (b &amp; 1 &lt;&lt; i)</span></span></code></pre></div><ol start="11"><li>删除二进制序列中最后一个值为 1 的位置</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a &amp;= (a - 1)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a &amp;= (a - 1)</span></span></code></pre></div><ol start="12"><li>计算 a 的相反数</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">-a === ~a + 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">-a === ~a + 1</span></span></code></pre></div><ol start="13"><li>保留 a 在二进制位中最后一个 1</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a &amp;= (-a)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a &amp;= (-a)</span></span></code></pre></div><ol start="14"><li>生成二进制位全为 1 的数</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">~0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">~0</span></span></code></pre></div><ol start="15"><li>保留 a 二进制序列中最后的 i - 1 位，其余补 0</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a &amp; ((1 &lt;&lt; i) - 1)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a &amp; ((1 &lt;&lt; i) - 1)</span></span></code></pre></div><ol start="16"><li>将 a 二进制序列中最后 i - 1 位全部置为 0</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a &amp; ~((1 &lt;&lt; i) - 1)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a &amp; ~((1 &lt;&lt; i) - 1)</span></span></code></pre></div><ol start="17"><li>判断 a 的二进制序列最高位是否为 1</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a &lt; 0 # 最高位为 1 必然是负数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a &lt; 0 # 最高位为 1 必然是负数</span></span></code></pre></div><ol start="18"><li>在二进制序列中，仅保留最高位的 1，其他设为 0，输出该数</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a = a | (a &gt;&gt; 1)</span></span>
<span class="line"><span style="color:#e1e4e8;">a = a | (a &gt;&gt; 2)</span></span>
<span class="line"><span style="color:#e1e4e8;">a = a | (a &gt;&gt; 4)</span></span>
<span class="line"><span style="color:#e1e4e8;">a = a | (a &gt;&gt; 8)</span></span>
<span class="line"><span style="color:#e1e4e8;">a = a | (a &gt;&gt; 16)</span></span>
<span class="line"><span style="color:#e1e4e8;">return (a + 1) &gt;&gt; 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a = a | (a &gt;&gt; 1)</span></span>
<span class="line"><span style="color:#24292e;">a = a | (a &gt;&gt; 2)</span></span>
<span class="line"><span style="color:#24292e;">a = a | (a &gt;&gt; 4)</span></span>
<span class="line"><span style="color:#24292e;">a = a | (a &gt;&gt; 8)</span></span>
<span class="line"><span style="color:#24292e;">a = a | (a &gt;&gt; 16)</span></span>
<span class="line"><span style="color:#24292e;">return (a + 1) &gt;&gt; 1</span></span></code></pre></div>`,64),o=[t];function c(r,d,g,y,h,v){return a(),e("div",null,o)}const i=s(p,[["render",c]]),b=Object.freeze(Object.defineProperty({__proto__:null,__pageData:n,default:i},Symbol.toStringTag,{value:"Module"}));export{b as _,n as __pageData,i as default};
