import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.12b7deed.js";const l=JSON.parse('{"title":"剪绳子","description":"","frontmatter":{"title":"剪绳子","head":[["meta",{"name":"og:title","content":"剪绳子 | VitePress"}]]},"headers":[],"relativePath":"algorithm/dynamic-programming/1.md","filePath":"algorithm/dynamic-programming/1.md","lastUpdated":1698918793000}'),o={name:"algorithm/dynamic-programming/1.md"},e=p(`<h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n 都是整数，n&gt;1 并且 m&gt;1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]<em>k[1]</em>...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是 8 时，我们把它剪成长度分别为 2、3、3 的三段，此时得到的最大乘积是 18。</p><p>示例 1：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">输入: 2</span></span>
<span class="line"><span style="color:#e1e4e8;">输出: 1</span></span>
<span class="line"><span style="color:#e1e4e8;">解释: 2 = 1 + 1, 1 × 1 = 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">输入: 2</span></span>
<span class="line"><span style="color:#24292e;">输出: 1</span></span>
<span class="line"><span style="color:#24292e;">解释: 2 = 1 + 1, 1 × 1 = 1</span></span></code></pre></div><p>示例  2:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">输入: 10</span></span>
<span class="line"><span style="color:#e1e4e8;">输出: 36</span></span>
<span class="line"><span style="color:#e1e4e8;">解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">输入: 10</span></span>
<span class="line"><span style="color:#24292e;">输出: 36</span></span>
<span class="line"><span style="color:#24292e;">解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36</span></span></code></pre></div><p>提示：</p><ul><li>2 &lt;= n &lt;= 58</li></ul><h2 id="理解题目" tabindex="-1">理解题目 <a class="header-anchor" href="#理解题目" aria-label="Permalink to &quot;理解题目&quot;">​</a></h2><p>由上面的题目可知，通过去剪断绳子，减了一次后面的你可以减也可以不减，只要剪成长度求出最大乘积即可</p><h2 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;">​</a></h2><p>对于正整数 n，当 n≥2 时，可以拆分成至少两个正整数的和。令 i 是拆分出的第一个正整数，则剩下的部分是 n−i，n−i 可以不继续拆分，或者继续拆分成至少两个正整数的和。由于每个正整数对应的最大乘积取决于比它小的正整数对应的最大乘积，因此可以使用动态规划求解。（关键在于把大的问题，拆分成小的问题）</p><p>第一步：定义 dp 数组，dp[i] 表示将正整数 i 拆分成至少两个正整数的和之后，这些正整数的最大乘积。</p><p>第二步：当 i≥2 时，假设对正整数 i 拆分出的第一个正整数是 j（1≤j&lt;i），则有以下两种方案：</p><ul><li>将 i 拆分成 j 和 i−j，且 i−j 不再拆分成多个正整数，此时的乘积是 j×(i−j)；</li><li>将 i 拆分成 j 和 i−j 的和，且 i−j 继续拆分成多个正整数，此时的乘积是 j×dp[i−j]。</li></ul><p>这里为什么会是 j×dp[i-j]呢？</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a1 = 1</span></span>
<span class="line"><span style="color:#e1e4e8;">a2=1+1</span></span>
<span class="line"><span style="color:#e1e4e8;">a3=a1+a2</span></span>
<span class="line"><span style="color:#e1e4e8;">a4=a1+a3 a4=a2+a2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a1 = 1</span></span>
<span class="line"><span style="color:#24292e;">a2=1+1</span></span>
<span class="line"><span style="color:#24292e;">a3=a1+a2</span></span>
<span class="line"><span style="color:#24292e;">a4=a1+a3 a4=a2+a2</span></span></code></pre></div><p>由数学归纳法可知，无论如何剪总是能在上一层找到被剪长度的剪法</p><p>所以状态转移方程是<code>dp[i] = Math.max(dp[i],Math.max(j*(i-j),j*dp[i-j]))</code></p><h2 id="答案" tabindex="-1">答案 <a class="header-anchor" href="#答案" aria-label="Permalink to &quot;答案&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cuttingRope</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">n</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> dp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> i; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      dp[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(dp[i], Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(j </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> j), j </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> dp[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> j]));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dp[n];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cuttingRope</span><span style="color:#24292E;">(</span><span style="color:#E36209;">n</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> dp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> i; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      dp[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(dp[i], Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(j </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> j), j </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> dp[i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> j]));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dp[n];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,21),t=[e];function c(y,E,i,d,h,F){return a(),n("div",null,t)}const r=s(o,[["render",c]]),m=Object.freeze(Object.defineProperty({__proto__:null,__pageData:l,default:r},Symbol.toStringTag,{value:"Module"}));export{m as _,l as __pageData,r as default};
