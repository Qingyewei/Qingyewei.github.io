import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.12b7deed.js";const p=JSON.parse('{"title":"js操作数组17种方法","description":"","frontmatter":{"title":"js操作数组17种方法","head":[["meta",{"name":"og:title","content":"js操作数组17种方法 | VitePress"}]]},"headers":[],"relativePath":"javaScript/arrayFunction.md","filePath":"javaScript/arrayFunction.md","lastUpdated":1698918793000}'),o={name:"javaScript/arrayFunction.md"},e=l(`<h2 id="创建数组" tabindex="-1">创建数组 <a class="header-anchor" href="#创建数组" aria-label="Permalink to &quot;创建数组&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 字面量方式:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这个方法也是我们最常用的，在初始化数组的时候 相当方便</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];  </span><span style="color:#6A737D;">// [1,2,3];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 构造器:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 实际上 new Array === Array,加不加new 一点影响都没有。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// [] </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// [,,,,] </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// [1,2,3]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 字面量方式:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这个方法也是我们最常用的，在初始化数组的时候 相当方便</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];  </span><span style="color:#6A737D;">// [1,2,3];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 构造器:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 实际上 new Array === Array,加不加new 一点影响都没有。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// [] </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [,,,,] </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [1,2,3]</span></span></code></pre></div><h3 id="arrary-from" tabindex="-1">Arrary.from() <a class="header-anchor" href="#arrary-from" aria-label="Permalink to &quot;Arrary.from()&quot;">​</a></h3><table><thead><tr><th>定义</th><th>语法</th><th>参数</th><th>是否改变原对象</th></tr></thead><tbody><tr><td>对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</td><td>Array.from(arrayLike, mapFn, thisArg)</td><td><code>arrayLike</code>:想要转换成数组的伪数组对象或可迭代对象。<br><code>mapFn</code> (可选):如果指定了该参数，新数组中的每个元素会执行该回调函数。<br> <code>thisArg</code> (可选):可选参数，执行回调函数 <code>mapFn</code> 时 <code>this</code> 对象。</td><td>❌</td></tr></tbody></table><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 1. 对象拥有length属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;周&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;星&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;星&#39;</span><span style="color:#E1E4E8;">, length: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(obj); </span><span style="color:#6A737D;">// [&#39;周&#39;,&#39;星&#39;,&#39;星&#39;];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 2. 部署了 Iterator接口的数据结构 比如:字符串、Set、NodeList对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// [&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">])); </span><span style="color:#6A737D;">// [&#39;a&#39;,&#39;b&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 1. 对象拥有length属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;周&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;星&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;星&#39;</span><span style="color:#24292E;">, length: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(obj); </span><span style="color:#6A737D;">// [&#39;周&#39;,&#39;星&#39;,&#39;星&#39;];</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 2. 部署了 Iterator接口的数据结构 比如:字符串、Set、NodeList对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">])); </span><span style="color:#6A737D;">// [&#39;a&#39;,&#39;b&#39;]</span></span></code></pre></div><h3 id="array-of" tabindex="-1">Array.of <a class="header-anchor" href="#array-of" aria-label="Permalink to &quot;Array.of&quot;">​</a></h3><table><thead><tr><th>定义</th><th>语法</th><th>参数</th><th>是否改变原数组</th></tr></thead><tbody><tr><td>创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。</td><td>Array.of(element)</td><td><code>element</code>:任意个参数，将按顺序成为返回数组中的元素。<br></td><td>❌</td></tr></tbody></table><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    Array.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">);       </span><span style="color:#6A737D;">// [7]</span></span>
<span class="line"><span style="color:#E1E4E8;">    Array.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// [1, 2, 3]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    Array.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">);       </span><span style="color:#6A737D;">// [7]</span></span>
<span class="line"><span style="color:#24292E;">    Array.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [1, 2, 3]</span></span></code></pre></div><h2 id="改变原数组的方法-9个" tabindex="-1">改变原数组的方法（9个） <a class="header-anchor" href="#改变原数组的方法-9个" aria-label="Permalink to &quot;改变原数组的方法（9个）&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ES5</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     a.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">shift</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">  a.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">unshift</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">reverse</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ES6</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    a.</span><span style="color:#B392F0;">copyWithin</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> a.fill</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ES5</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">     a.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">  a.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">unshift</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">reverse</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ES6</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    a.</span><span style="color:#6F42C1;">copyWithin</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> a.fill</span></span></code></pre></div><p>对于这些能够改变原数组的方法，要注意避免在循环遍历中改变原数组的选项，比如: 改变数组的长度，导致遍历的长度出现问题。</p><h3 id="splice" tabindex="-1">splice <a class="header-anchor" href="#splice" aria-label="Permalink to &quot;splice&quot;">​</a></h3><p>定义：通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容</p><p>语法：Array.splice( start, deleteCount,...arguments )</p><p>参数：</p><ul><li><code>start</code>: <ol><li>指定修改的开始位置（从0计数）。</li><li>如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位；</li><li>如果负数的绝对值大于数组的长度，则表示开始位置为第0位</li></ol></li><li><code>deleteCount</code> (可选): <ol><li>整数，表示要移除的数组元素的个数。</li><li>如果 <code>deleteCount</code> 大于 <code>start</code> 之后的元素的总数，则从 <code>start</code> 后面的元素都将被删除（含第 <code>start</code> 位）。</li><li>如果 <code>deleteCount</code> 被省略了，或者它的值大于等于<code>array.length - start</code>(也就是说，如果它大于或者等于<code>start</code>之后的所有元素的数量)，那么<code>start</code>之后数组的所有元素都会被删除。</li><li>如果 <code>deleteCount</code> 是 0 或者负数，则不移除元素。这种情况下，至少应添加一个新元素。</li></ol></li><li><code>...arguments</code> (可选):要添加进数组的元素,从<code>start</code> 位置开始。如果不指定，则 <code>splice()</code> 将只删除数组元素。 是否改变原数组：✅</li></ul><p>返回值：如果有元素被删除,返回包含被删除项目的新数组，否则返回空数组。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> myFish </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;angel&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;clown&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;mandarin&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;sturgeon&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> removed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> myFish.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 运算后的 myFish: [&quot;angel&quot;, &quot;clown&quot;]</span></span>
<span class="line"><span style="color:#6A737D;">// 被删除的元素: [&quot;mandarin&quot;, &quot;sturgeon&quot;]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> myFish </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;angel&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;clown&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;mandarin&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;sturgeon&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> removed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> myFish.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;drum&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;guitar&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 运算后的 myFish: [&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;guitar&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;]</span></span>
<span class="line"><span style="color:#6A737D;">// 被删除的元素: [], 没有元素被删除</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> myFish </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">]; </span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> removed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> myFish.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;添加1&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;添加2&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 运算后的 myFish: [1,2,3,4,5,&#39;添加1&#39;,&#39;添加2&#39;]</span></span>
<span class="line"><span style="color:#6A737D;">// 被删除的元素: [6,7], 没有元素被删除</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> myFish </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;angel&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;clown&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;mandarin&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;sturgeon&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> removed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myFish.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 运算后的 myFish: [&quot;angel&quot;, &quot;clown&quot;]</span></span>
<span class="line"><span style="color:#6A737D;">// 被删除的元素: [&quot;mandarin&quot;, &quot;sturgeon&quot;]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> myFish </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;angel&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;clown&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;mandarin&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;sturgeon&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> removed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myFish.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;drum&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;guitar&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 运算后的 myFish: [&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;guitar&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;]</span></span>
<span class="line"><span style="color:#6A737D;">// 被删除的元素: [], 没有元素被删除</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> myFish </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">]; </span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> removed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myFish.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;添加1&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;添加2&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 运算后的 myFish: [1,2,3,4,5,&#39;添加1&#39;,&#39;添加2&#39;]</span></span>
<span class="line"><span style="color:#6A737D;">// 被删除的元素: [6,7], 没有元素被删除</span></span></code></pre></div><h3 id="sort" tabindex="-1">sort <a class="header-anchor" href="#sort" aria-label="Permalink to &quot;sort&quot;">​</a></h3><p>定义：对数组的元素进行排序，并返回数组</p><p>语法：Array.sort(compareFunction)</p><p>参数：</p><ul><li><code>compareFunction</code>（可选）:用来指定按某种顺序进行排列的函数。如果省略，默认按字母升序，如果不是元素不是字符串的话，会调用<code>toString()</code>方法将元素转化为字符串的Unicode(万国码)位点，然后再比较字符。 是否改变原数组：✅</li></ul><p>返回值：排序后的数组。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">// 字符串排列 看起来很正常</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;Banana&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Orange&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Apple&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Mango&quot;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    a.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// [&quot;Apple&quot;,&quot;Banana&quot;,&quot;Mango&quot;,&quot;Orange&quot;]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 数字排序的时候 因为转换成Unicode字符串之后，有些数字会比较大会排在后面 这显然不是我们想要的</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// [1,10,20,25,3,8];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">// 字符串排列 看起来很正常</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;Banana&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Orange&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Apple&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Mango&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    a.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// [&quot;Apple&quot;,&quot;Banana&quot;,&quot;Mango&quot;,&quot;Orange&quot;]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 数字排序的时候 因为转换成Unicode字符串之后，有些数字会比较大会排在后面 这显然不是我们想要的</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">25</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// [1,10,20,25,3,8];</span></span></code></pre></div><p><strong>compareFunction的两个参数：</strong></p><p>sort的<code>compareFunction</code>有两个默认参数，要在函数中接收这两个参数，这两个参数是数组中两个要比较的元素，通常我们用 a 和 b 接收两个将要比较的元素：</p><ul><li>若<code>compareFunction</code>返回值&lt;0，那么a将排到b的前面;</li><li>若<code>compareFunction</code>返回值=0，那么a 和 b 相对位置不变；</li><li>若<code>compareFunction</code>返回值&gt;0，那么b 排在a 将的前面；</li></ul><p><strong>常见用法</strong>：</p><p>1、数组元素为数字升序、倒序</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> array </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 升序 a-b &lt; 0   a将排到b的前面，按照a的大小来排序的 </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 比如被减数a是10，减数是20  10-20 &lt; 0   被减数a(10)在减数b(20)前面   </span></span>
<span class="line"><span style="color:#E1E4E8;"> array.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">b;</span></span>
<span class="line"><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//也可以简写成</span></span>
<span class="line"><span style="color:#E1E4E8;"> array.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(array); </span><span style="color:#6A737D;">// [1,3,8,10,20,25];</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 降序 被减数和减数调换了  20-10&gt;0 被减数b(20)在减数a(10)的前面</span></span>
<span class="line"><span style="color:#E1E4E8;"> array.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> b</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">a;</span></span>
<span class="line"><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//也可以简写成</span></span>
<span class="line"><span style="color:#E1E4E8;"> array.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> a)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(array); </span><span style="color:#6A737D;">// [25,20,10,8,3,1];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> array </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  [</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">25</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 升序 a-b &lt; 0   a将排到b的前面，按照a的大小来排序的 </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 比如被减数a是10，减数是20  10-20 &lt; 0   被减数a(10)在减数b(20)前面   </span></span>
<span class="line"><span style="color:#24292E;"> array.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#E36209;">b</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b;</span></span>
<span class="line"><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//也可以简写成</span></span>
<span class="line"><span style="color:#24292E;"> array.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">((</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b)</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(array); </span><span style="color:#6A737D;">// [1,3,8,10,20,25];</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 降序 被减数和减数调换了  20-10&gt;0 被减数b(20)在减数a(10)的前面</span></span>
<span class="line"><span style="color:#24292E;"> array.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#E36209;">b</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> b</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">a;</span></span>
<span class="line"><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//也可以简写成</span></span>
<span class="line"><span style="color:#24292E;"> array.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">((</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> a)</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(array); </span><span style="color:#6A737D;">// [25,20,10,8,3,1];</span></span></code></pre></div><p>2、数组元素为对象</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> items </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  { name: </span><span style="color:#9ECBFF;">&#39;Edward&#39;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { name: </span><span style="color:#9ECBFF;">&#39;Sharpe&#39;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#79B8FF;">37</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { name: </span><span style="color:#9ECBFF;">&#39;And&#39;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#79B8FF;">45</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { name: </span><span style="color:#9ECBFF;">&#39;The&#39;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { name: </span><span style="color:#9ECBFF;">&#39;Magnetic&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { name: </span><span style="color:#9ECBFF;">&#39;Zeros&#39;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#79B8FF;">37</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// sort by value</span></span>
<span class="line"><span style="color:#E1E4E8;">items.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (a.value </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b.value)</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> items </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&#39;Edward&#39;</span><span style="color:#24292E;">, value: </span><span style="color:#005CC5;">21</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&#39;Sharpe&#39;</span><span style="color:#24292E;">, value: </span><span style="color:#005CC5;">37</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&#39;And&#39;</span><span style="color:#24292E;">, value: </span><span style="color:#005CC5;">45</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&#39;The&#39;</span><span style="color:#24292E;">, value: </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&#39;Magnetic&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&#39;Zeros&#39;</span><span style="color:#24292E;">, value: </span><span style="color:#005CC5;">37</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// sort by value</span></span>
<span class="line"><span style="color:#24292E;">items.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (a.value </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b.value)</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>3、自定义<code>compareFunction</code>函数，可以让你玩出更多新花样</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> items </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  { name: </span><span style="color:#9ECBFF;">&#39;Edward&#39;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { name: </span><span style="color:#9ECBFF;">&#39;Sharpe&#39;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#79B8FF;">37</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { name: </span><span style="color:#9ECBFF;">&#39;And&#39;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#79B8FF;">45</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { name: </span><span style="color:#9ECBFF;">&#39;The&#39;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { name: </span><span style="color:#9ECBFF;">&#39;Magnetic&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { name: </span><span style="color:#9ECBFF;">&#39;Zeros&#39;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#79B8FF;">37</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// sort by name</span></span>
<span class="line"><span style="color:#E1E4E8;">items.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> nameA </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a.name.</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// ignore upper and lowercase</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> nameB </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b.name.</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// ignore upper and lowercase</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nameA </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> nameB) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nameA </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> nameB) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// names must be equal</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> items </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&#39;Edward&#39;</span><span style="color:#24292E;">, value: </span><span style="color:#005CC5;">21</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&#39;Sharpe&#39;</span><span style="color:#24292E;">, value: </span><span style="color:#005CC5;">37</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&#39;And&#39;</span><span style="color:#24292E;">, value: </span><span style="color:#005CC5;">45</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&#39;The&#39;</span><span style="color:#24292E;">, value: </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&#39;Magnetic&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&#39;Zeros&#39;</span><span style="color:#24292E;">, value: </span><span style="color:#005CC5;">37</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// sort by name</span></span>
<span class="line"><span style="color:#24292E;">items.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> nameA </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a.name.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// ignore upper and lowercase</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> nameB </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b.name.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// ignore upper and lowercase</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nameA </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> nameB) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nameA </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> nameB) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// names must be equal</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h3 id="pop" tabindex="-1">pop <a class="header-anchor" href="#pop" aria-label="Permalink to &quot;pop&quot;">​</a></h3><p>定义：从数组中删除<strong>最后一个</strong>元素，并返回该元素的值</p><p>语法：Array.pop()</p><p>参数：无</p><p>是否改变原数组：✅</p><p>返回值：从数组中删除的元素(当数组为空时返回<code>undefined</code>）。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> myFish </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;angel&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;clown&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;mandarin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;surgeon&quot;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> popped </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> myFish.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(myFish);</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(popped);</span></span>
<span class="line"><span style="color:#6A737D;">// surgeon</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> myFish </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;angel&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;clown&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;mandarin&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;surgeon&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> popped </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myFish.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(myFish);</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(popped);</span></span>
<span class="line"><span style="color:#6A737D;">// surgeon</span></span></code></pre></div><h3 id="shift" tabindex="-1">shift <a class="header-anchor" href="#shift" aria-label="Permalink to &quot;shift&quot;">​</a></h3><p>定义：从数组中删除<strong>第一个</strong>元素，并返回该元素的值</p><p>语法：Array.shift()</p><p>参数：无</p><p>是否改变原数组：✅</p><p>返回值：从数组中删除的元素(当数组为空时返回<code>undefined</code>）。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> myFish </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;angel&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;clown&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;mandarin&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;surgeon&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> shifted </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> myFish.</span><span style="color:#B392F0;">shift</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;调用 shift 之后: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> myFish);</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;调用 shift 之后: clown,mandarin,surgeon&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;被删除的元素: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> shifted);</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;被删除的元素: angel&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> myFish </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;angel&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;clown&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;mandarin&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;surgeon&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> shifted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myFish.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;调用 shift 之后: &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> myFish);</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;调用 shift 之后: clown,mandarin,surgeon&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;被删除的元素: &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> shifted);</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;被删除的元素: angel&quot;</span></span></code></pre></div><h3 id="push" tabindex="-1">push <a class="header-anchor" href="#push" aria-label="Permalink to &quot;push&quot;">​</a></h3><p>定义：将一个或多个元素添加到数组的<strong>末尾</strong></p><p>语法：Array.push(element1, ..., elementN)</p><p>参数：</p><ul><li><code>element1, ..., elementN</code>:被添加到数组末尾的元素。</li></ul><p>是否改变原数组：✅</p><p>返回值：该数组的新长度。</p><p><strong>常见用法</strong></p><p>1、添加新元素到数组</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> sports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;soccer&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;baseball&quot;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sports.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;football&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;swimming&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(sports);</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;soccer&quot;, &quot;baseball&quot;, &quot;football&quot;, &quot;swimming&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(total);</span></span>
<span class="line"><span style="color:#6A737D;">// 4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;soccer&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;baseball&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sports.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;football&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;swimming&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(sports);</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;soccer&quot;, &quot;baseball&quot;, &quot;football&quot;, &quot;swimming&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(total);</span></span>
<span class="line"><span style="color:#6A737D;">// 4</span></span></code></pre></div><p>2、合并数组</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> vegetables </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;parsnip&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;potato&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> moreVegs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;celery&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;beetroot&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将第二个数组融合进第一个数组</span></span>
<span class="line"><span style="color:#6A737D;">// 相当于 vegetables.push(&#39;celery&#39;, &#39;beetroot&#39;);</span></span>
<span class="line"><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.push.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(vegetables, moreVegs);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(vegetables);</span></span>
<span class="line"><span style="color:#6A737D;">// [&#39;parsnip&#39;, &#39;potato&#39;, &#39;celery&#39;, &#39;beetroot&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(moreVegs);</span></span>
<span class="line"><span style="color:#6A737D;">//[&#39;celery&#39;, &#39;beetroot&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> vegetables </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;parsnip&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;potato&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> moreVegs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;celery&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;beetroot&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将第二个数组融合进第一个数组</span></span>
<span class="line"><span style="color:#6A737D;">// 相当于 vegetables.push(&#39;celery&#39;, &#39;beetroot&#39;);</span></span>
<span class="line"><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.push.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(vegetables, moreVegs);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(vegetables);</span></span>
<span class="line"><span style="color:#6A737D;">// [&#39;parsnip&#39;, &#39;potato&#39;, &#39;celery&#39;, &#39;beetroot&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(moreVegs);</span></span>
<span class="line"><span style="color:#6A737D;">//[&#39;celery&#39;, &#39;beetroot&#39;]</span></span></code></pre></div><h3 id="unshift" tabindex="-1">unshift <a class="header-anchor" href="#unshift" aria-label="Permalink to &quot;unshift&quot;">​</a></h3><p>定义：将一个或多个元素添加到数组的<strong>开头</strong></p><p>语法：Array.unshift(element1, ..., elementN)</p><p>参数：</p><ul><li><code>element1, ..., elementN</code>:要添加到数组开头的元素或多个元素。</li></ul><p>是否改变原数组：✅</p><p>返回值：该数组的新长度。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">array1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(array1.</span><span style="color:#B392F0;">unshift</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">// 5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(array1);</span></span>
<span class="line"><span style="color:#6A737D;">// [4, 5, 1, 2, 3]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">array1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(array1.</span><span style="color:#6F42C1;">unshift</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">// 5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(array1);</span></span>
<span class="line"><span style="color:#6A737D;">// [4, 5, 1, 2, 3]</span></span></code></pre></div><h3 id="reverse" tabindex="-1">reverse <a class="header-anchor" href="#reverse" aria-label="Permalink to &quot;reverse&quot;">​</a></h3><p>定义：将数组中元素的位置颠倒</p><p>语法：Array.reverse()</p><p>参数：无</p><p>是否改变原数组：✅</p><p>返回值：颠倒后的数组。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">a.</span><span style="color:#B392F0;">reverse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a); </span><span style="color:#6A737D;">// [3, 2, 1]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">a.</span><span style="color:#6F42C1;">reverse</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a); </span><span style="color:#6A737D;">// [3, 2, 1]</span></span></code></pre></div><h3 id="copywithin" tabindex="-1">copyWithin <a class="header-anchor" href="#copywithin" aria-label="Permalink to &quot;copyWithin&quot;">​</a></h3><p>定义：浅复制数组的一部分到同一数组中的另一个位置</p><p>语法：Array.copyWithin(target, start, end)</p><p>参数：</p><ul><li><code>target</code>：从该位置开始替换数据。如果为负值，表示倒数。</li><li><code>start</code>（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。</li><li><code>end</code>（可选）：到该位置前停止读取数据，默认等于数组长度。使用负数可从数组结尾处规定位置。</li></ul><p>是否改变原数组：✅</p><p>返回值：改变后的数组。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">copyWithin</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// [1, 2, 3, 1, 2]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">copyWithin</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// [4, 5, 3, 4, 5]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">copyWithin</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// [4, 2, 3, 4, 5]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">copyWithin</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// [1, 2, 3, 3, 4]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">copyWithin</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// [1, 2, 3, 1, 2]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">copyWithin</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// [4, 5, 3, 4, 5]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">copyWithin</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// [4, 2, 3, 4, 5]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">copyWithin</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// [1, 2, 3, 3, 4]</span></span></code></pre></div><p>第一个例子：<code>target</code> = -2 、start=0、end=数组长度，从4的位置从1开始复制到最后一个<br> 第二个例子：<code>target</code> = 0 、start=3、end=数组长度，从0的位置从4开始复制到最后一个<br> 第三个例子：<code>target</code> = 0 、start=3、end=4，从0的位置从4开始复制到5前的数据<br> 第四个例子：<code>target</code> = -2 、start=-3、end=-1，从4的位置从3开始复制到最后一个<br></p><h3 id="fill" tabindex="-1">fill <a class="header-anchor" href="#fill" aria-label="Permalink to &quot;fill&quot;">​</a></h3><p>定义：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素</p><p>语法：Array.fill(value, start, end)</p><p>参数：</p><ul><li><code>value</code>：用来填充数组元素的值。</li><li><code>start</code>（可选）：起始索引，默认值为0。</li><li><code>end</code>（可选）：终止索引，到该位置前停止读取数据，默认值为 <code>this.length</code>。</li></ul><p>是否改变原数组：✅</p><p>返回值：改变后的数组。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);               </span><span style="color:#6A737D;">// [4, 4, 4]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);         </span><span style="color:#6A737D;">// [1, 4, 3]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">);     </span><span style="color:#6A737D;">// [1, 2, 3]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);               </span><span style="color:#6A737D;">// [4, 4, 4]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);         </span><span style="color:#6A737D;">// [1, 4, 3]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">);     </span><span style="color:#6A737D;">// [1, 2, 3]</span></span></code></pre></div><h2 id="不改变原数组的方法-8个" tabindex="-1">不改变原数组的方法(8个) <a class="header-anchor" href="#不改变原数组的方法-8个" aria-label="Permalink to &quot;不改变原数组的方法(8个)&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ES5</span><span style="color:#E1E4E8;">：</span></span>
<span class="line"><span style="color:#E1E4E8;">    slice、join、toLocateString、toString、cancat、indexOf、lastIndexOf、</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ES7</span><span style="color:#E1E4E8;">：</span></span>
<span class="line"><span style="color:#E1E4E8;">    includes</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ES5</span><span style="color:#24292E;">：</span></span>
<span class="line"><span style="color:#24292E;">    slice、join、toLocateString、toString、cancat、indexOf、lastIndexOf、</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ES7</span><span style="color:#24292E;">：</span></span>
<span class="line"><span style="color:#24292E;">    includes</span></span></code></pre></div><h3 id="slice" tabindex="-1">slice <a class="header-anchor" href="#slice" aria-label="Permalink to &quot;slice&quot;">​</a></h3><p>定义：一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的<strong>浅拷贝</strong>（包括 <code>begin</code>，不包括<code>end</code>）</p><p>语法：Array.slice(begin, end)</p><p>参数：</p><ul><li><code>begin</code>（可选）：索引数值,接受负值，从该索引处开始提取原数组中的元素,默认值为0。</li><li><code>end</code>（可选）：终止索引，到该位置前停止读取数据，接受负值，在该索引处前结束提取原数组元素，默认值为数组末尾(包括最后一个元素)。</li></ul><p>是否改变原数组：❌</p><p>返回值：一个含有被提取元素的新数组。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> fruits </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;Banana&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Orange&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Lemon&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Apple&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Mango&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> citrus </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fruits.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// fruits 输出 [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Lemon&#39;, &#39;Apple&#39;, &#39;Mango&#39;]</span></span>
<span class="line"><span style="color:#6A737D;">// citrus 输出 [&#39;Orange&#39;,&#39;Lemon&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> citrus </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fruits.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// citrus 输出 [&#39;Apple&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> fruits </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;Banana&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Orange&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Lemon&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Apple&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Mango&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> citrus </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fruits.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// fruits 输出 [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Lemon&#39;, &#39;Apple&#39;, &#39;Mango&#39;]</span></span>
<span class="line"><span style="color:#6A737D;">// citrus 输出 [&#39;Orange&#39;,&#39;Lemon&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> citrus </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fruits.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// citrus 输出 [&#39;Apple&#39;]</span></span></code></pre></div><p><strong>真的就只是浅拷贝</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;Banana&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;Orange&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">a.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// [&#39;Banana&#39;]</span></span>
<span class="line"><span style="color:#E1E4E8;">a[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;改变原数组&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a,b); </span><span style="color:#6A737D;">// [&#39;改变原数组&#39;,&#39;Orange&#39;] [&#39;Banana&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">b[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;改变拷贝的数组&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a,b); </span><span style="color:#6A737D;">// [&#39;改变原数组&#39;,&#39;Orange&#39;] [&#39;改变拷贝的数组&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;Banana&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;Orange&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">a.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [&#39;Banana&#39;]</span></span>
<span class="line"><span style="color:#24292E;">a[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;改变原数组&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a,b); </span><span style="color:#6A737D;">// [&#39;改变原数组&#39;,&#39;Orange&#39;] [&#39;Banana&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">b[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;改变拷贝的数组&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a,b); </span><span style="color:#6A737D;">// [&#39;改变原数组&#39;,&#39;Orange&#39;] [&#39;改变拷贝的数组&#39;]</span></span></code></pre></div><p>如上：新数组是浅拷贝的，<strong>元素是简单数据类型，改变之后不会互相干扰</strong>。</p><p>如果是<strong>复杂数据类型(对象,数组)的话，改变其中一个，另外一个也会改变</strong>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [{name:</span><span style="color:#9ECBFF;">&#39;Banana&#39;</span><span style="color:#E1E4E8;">}];</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">a.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(b,a); </span><span style="color:#6A737D;">// [{&quot;name&quot;:&quot;Banana&quot;}]  [{&quot;name&quot;:&quot;Banana&quot;}]</span></span>
<span class="line"><span style="color:#E1E4E8;">a[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;改变原数组&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(b,a); </span><span style="color:#6A737D;">// [{&quot;name&quot;:&quot;改变原数组&quot;}] [{&quot;name&quot;:&quot;改变原数组&quot;}]</span></span>
<span class="line"><span style="color:#E1E4E8;">b[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;改变拷贝数组&#39;</span><span style="color:#E1E4E8;">,b[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].age</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;改变拷贝数组&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">//  [{&quot;name&quot;:&quot;改变拷贝数组&quot;,&quot;age&quot;:&quot;改变拷贝数组&quot;}] [{&quot;name&quot;:&quot;改变拷贝数组&quot;,&quot;age&quot;:&quot;改变拷贝数组&quot;}]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [{name:</span><span style="color:#032F62;">&#39;Banana&#39;</span><span style="color:#24292E;">}];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">a.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(b,a); </span><span style="color:#6A737D;">// [{&quot;name&quot;:&quot;Banana&quot;}]  [{&quot;name&quot;:&quot;Banana&quot;}]</span></span>
<span class="line"><span style="color:#24292E;">a[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;改变原数组&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(b,a); </span><span style="color:#6A737D;">// [{&quot;name&quot;:&quot;改变原数组&quot;}] [{&quot;name&quot;:&quot;改变原数组&quot;}]</span></span>
<span class="line"><span style="color:#24292E;">b[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;改变拷贝数组&#39;</span><span style="color:#24292E;">,b[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].age</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;改变拷贝数组&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//  [{&quot;name&quot;:&quot;改变拷贝数组&quot;,&quot;age&quot;:&quot;改变拷贝数组&quot;}] [{&quot;name&quot;:&quot;改变拷贝数组&quot;,&quot;age&quot;:&quot;改变拷贝数组&quot;}]</span></span></code></pre></div><p>原因在定义上面说过了的：slice()是浅拷贝，对于复杂的数据类型浅拷贝，拷贝的只是指向原数组的指针，所以无论改变原数组，还是浅拷贝的数组，都是改变原数组的数据。</p><h3 id="join" tabindex="-1">join <a class="header-anchor" href="#join" aria-label="Permalink to &quot;join&quot;">​</a></h3><p>定义：将一个数组（或一个<a href="https://developer.mozilla.org/zh-CN_docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects" target="_blank" rel="noreferrer">类数组对象</a>）的所有元素连接成一个字符串并返回这个字符串</p><p>语法：Array.join(separator)</p><p>参数：</p><ul><li><code>separator</code>（可选）：指定一个字符串来分隔数组的每个元素。如果需要，将分隔符转换为字符串。如果缺省该值，数组元素用逗号（<code>,</code>）分隔。如果<code>separator</code>是空字符串(<code>&quot;&quot;</code>)，则所有元素之间都没有任何字符。</li></ul><p>是否改变原数组：❌</p><p>返回值：一个所有数组元素连接的字符串。如果 <code>arr.length</code> 为0，则返回空字符串。</p><p><strong>常见用法</strong></p><p>1、数组元素为数字或者字符串</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;Wind&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Rain&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Fire&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> myVar1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">();      </span><span style="color:#6A737D;">// myVar1的值变为&quot;Wind,Rain,Fire&quot;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> myVar2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39; + &#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// myVar2的值变为&quot;Wind + Rain + Fire&quot;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> myVar3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">);    </span><span style="color:#6A737D;">// myVar3的值变为&quot;WindRainFire&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;Wind&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Rain&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Fire&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> myVar1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">();      </span><span style="color:#6A737D;">// myVar1的值变为&quot;Wind,Rain,Fire&quot;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> myVar2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39; + &#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// myVar2的值变为&quot;Wind + Rain + Fire&quot;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> myVar3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">);    </span><span style="color:#6A737D;">// myVar3的值变为&quot;WindRainFire&quot;</span></span></code></pre></div><p>2、数组元素为数组或者对象</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [[</span><span style="color:#9ECBFF;">&#39;OBKoro1&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;23&#39;</span><span style="color:#E1E4E8;">],</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str1</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">a.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// OBKoro1,23,test</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [{name:</span><span style="color:#9ECBFF;">&#39;OBKoro1&#39;</span><span style="color:#E1E4E8;">,age:</span><span style="color:#9ECBFF;">&#39;23&#39;</span><span style="color:#E1E4E8;">},</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// [object Object],test</span></span>
<span class="line"><span style="color:#6A737D;">// 对象转字符串推荐JSON.stringify(obj);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [[</span><span style="color:#032F62;">&#39;OBKoro1&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;23&#39;</span><span style="color:#24292E;">],</span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str1</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">a.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// OBKoro1,23,test</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [{name:</span><span style="color:#032F62;">&#39;OBKoro1&#39;</span><span style="color:#24292E;">,age:</span><span style="color:#032F62;">&#39;23&#39;</span><span style="color:#24292E;">},</span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// [object Object],test</span></span>
<span class="line"><span style="color:#6A737D;">// 对象转字符串推荐JSON.stringify(obj);</span></span></code></pre></div><p>第一种：在数组元素是数组的时候，会将里面的数组也调用<code>join()</code><br> 第二种：在数组元素是对象的时候，对象会被转为<code>[object Object]</code>字符串</p><h3 id="tolocalestring" tabindex="-1">toLocaleString <a class="header-anchor" href="#tolocalestring" aria-label="Permalink to &quot;toLocaleString&quot;">​</a></h3><p>定义：将使用各自的 <code>toLocaleString</code> 方法转成字符串，这些字符串将使用一个特定语言环境的字符串（例如一个逗号 &quot;,&quot;）隔开。</p><p>语法：Array.toLocaleString(locales,options)</p><p>参数：</p><ul><li><code>locales</code>（可选）：参数必须是一个 <a href="https://tools.ietf.org/html/rfc5646" target="_blank" rel="noreferrer">BCP 47 语言标记</a>的字符串，或者是一个包括多个语言标记的数组。如果 <code>locales</code> 参数未提供或者是 undefined，便会使用运行时默认的 locale。</li><li><code>options</code>(可选)：一个可配置属性的对象，对于数字 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString" target="_blank" rel="noreferrer">Number.prototype.toLocaleString()</a>，对于日期<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString" target="_blank" rel="noreferrer">Date.prototype.toLocaleString()</a>.</li></ul><p>是否改变原数组：❌</p><p>返回值：一个所有数组元素连接的字符串。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[{name:</span><span style="color:#9ECBFF;">&#39;Orange&#39;</span><span style="color:#E1E4E8;">},</span><span style="color:#79B8FF;">23</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;abcd&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">()]; </span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">a.</span><span style="color:#B392F0;">toLocaleString</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#6A737D;">// [object Object],23,abcd,2018/5/28 下午1:52:20</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[{name:</span><span style="color:#032F62;">&#39;Orange&#39;</span><span style="color:#24292E;">},</span><span style="color:#005CC5;">23</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;abcd&#39;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">()]; </span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">a.</span><span style="color:#6F42C1;">toLocaleString</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#6A737D;">// [object Object],23,abcd,2018/5/28 下午1:52:20</span></span></code></pre></div><h3 id="tostring" tabindex="-1">toString <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;toString&quot;">​</a></h3><p>定义：将数组转换为由逗号链接起来的字符串。</p><p>语法：Array.toString()</p><p>参数：无</p><p>是否改变原数组：❌</p><p>返回值：一个所有数组元素连接的字符串。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">array1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;1a&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(array1.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">//  &quot;1,2,a,1a&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">array1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;1a&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(array1.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">//  &quot;1,2,a,1a&quot;</span></span></code></pre></div><h3 id="cancat" tabindex="-1">cancat <a class="header-anchor" href="#cancat" aria-label="Permalink to &quot;cancat&quot;">​</a></h3><p>定义：合并两个或多个数组。</p><p>语法：Array.cancat(valueN)</p><p>参数：</p><ul><li><code>valueN</code>：数组和/或值，将被合并到一个新的数组中。如果省略了所有 <code>valueN</code> 参数，则 <code>concat</code> 会返回调用此方法的现存数组的一个浅拷贝</li></ul><p>是否改变原数组：❌</p><p>返回值：返回新的数组。</p><p><strong>常见用法</strong></p><p>1、数组元素为数字或者字符串</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> alpha </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> numeric </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">alpha.</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(numeric);</span></span>
<span class="line"><span style="color:#6A737D;">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, 1, 2, 3]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> alpha </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> numeric </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">alpha.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(numeric);</span></span>
<span class="line"><span style="color:#6A737D;">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, 1, 2, 3]</span></span></code></pre></div><p>2、扁体化数组</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> arr1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">], [</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]];</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> arr2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [].concat.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">([], arr1);</span></span>
<span class="line"><span style="color:#6A737D;">// arr2 [0, 1, 2, 3, 4, 5]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arr1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]];</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arr2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [].concat.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">([], arr1);</span></span>
<span class="line"><span style="color:#6A737D;">// arr2 [0, 1, 2, 3, 4, 5]</span></span></code></pre></div><p><strong>扩展运算符<code>...</code>合并数组</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [ </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">a, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a,b); </span><span style="color:#6A737D;">//  [2, 3, 4, 5] [4,2,3,4,5,4,4]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [ </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">a, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a,b); </span><span style="color:#6A737D;">//  [2, 3, 4, 5] [4,2,3,4,5,4,4]</span></span></code></pre></div><h3 id="indexof" tabindex="-1">indexOf <a class="header-anchor" href="#indexof" aria-label="Permalink to &quot;indexOf&quot;">​</a></h3><p>定义：用于查找数组是否存在某个元素。</p><p>语法：Array.indexOf(searchElement,fromIndex)</p><p>参数：</p><ul><li><code>searchElement</code>：被查找的元素</li><li><code>fromIndex</code>：开始查找的位置(不能大于等于数组的长度，返回-1)，接受负值，默认值为0。</li></ul><p>是否改变原数组：❌</p><p>返回值：首个被找到的元素在数组中的索引位置; 若没有找到则返回 -1</p><p>严格相等的搜索: 数组的indexOf搜索跟字符串的indexOf不一样,数组的indexOf使用严格相等<code>===</code>搜索元素，即<strong>数组元素要完全匹配</strong>才能搜索成功。</p><p><strong>注意</strong>：indexOf()不能识别<code>NaN</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;啦啦&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;啦&#39;</span><span style="color:#E1E4E8;">));  </span><span style="color:#6A737D;">// -1 </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;NaN&#39;</span><span style="color:#E1E4E8;">));  </span><span style="color:#6A737D;">// -1 </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;啦啦&#39;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;啦啦&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">24</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;啦&#39;</span><span style="color:#24292E;">));  </span><span style="color:#6A737D;">// -1 </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;NaN&#39;</span><span style="color:#24292E;">));  </span><span style="color:#6A737D;">// -1 </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;啦啦&#39;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 0</span></span></code></pre></div><h3 id="lastindexof" tabindex="-1">lastIndexOf <a class="header-anchor" href="#lastindexof" aria-label="Permalink to &quot;lastIndexOf&quot;">​</a></h3><p>定义：用于查找在数组中的最后一个的索引。</p><p>语法：Array.lastIndexOf(searchElement,fromIndex)</p><p>参数：</p><ul><li><code>searchElement</code>：被查找的元素</li><li><code>fromIndex</code>：逆向查找开始位置，默认值数组的长度-1，即查找整个数组。规则如下： <ol><li>正值。如果该值大于或等于数组的长度，则整个数组会被查找。</li><li>负值。将其视为从数组末尾向前的偏移。(比如-2，从数组最后第二个元素开始往前查找)</li><li>负值。其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。</li></ol></li></ul><p>是否改变原数组：❌</p><p>返回值：首个被找到的元素在数组中的索引位置; 若没有找到则返回 -1</p><p>严格相等的搜索: 跟数组的indexOf一样</p><p><strong>注意</strong>：lastIndexOf()不能识别<code>NaN</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> array </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> array.</span><span style="color:#B392F0;">lastIndexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// index is 3</span></span>
<span class="line"><span style="color:#E1E4E8;">index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> array.</span><span style="color:#B392F0;">lastIndexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// index is -1</span></span>
<span class="line"><span style="color:#E1E4E8;">index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> array.</span><span style="color:#B392F0;">lastIndexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// index is 3</span></span>
<span class="line"><span style="color:#E1E4E8;">index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> array.</span><span style="color:#B392F0;">lastIndexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// index is 0</span></span>
<span class="line"><span style="color:#E1E4E8;">index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> array.</span><span style="color:#B392F0;">lastIndexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// index is 0</span></span>
<span class="line"><span style="color:#E1E4E8;">index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> array.</span><span style="color:#B392F0;">lastIndexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// index is 3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> array </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> array.</span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// index is 3</span></span>
<span class="line"><span style="color:#24292E;">index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> array.</span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// index is -1</span></span>
<span class="line"><span style="color:#24292E;">index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> array.</span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// index is 3</span></span>
<span class="line"><span style="color:#24292E;">index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> array.</span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// index is 0</span></span>
<span class="line"><span style="color:#24292E;">index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> array.</span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// index is 0</span></span>
<span class="line"><span style="color:#24292E;">index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> array.</span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// index is 3</span></span></code></pre></div><h3 id="includes" tabindex="-1">includes <a class="header-anchor" href="#includes" aria-label="Permalink to &quot;includes&quot;">​</a></h3><p>定义：用来判断一个数组是否包含一个指定的值。</p><p>语法：Array.includes(searchElement,fromIndex)</p><p>参数：</p><ul><li><code>searchElement</code>：被查找的元素</li><li><code>fromIndex</code>：默认值为0，参数表示搜索的起始位置，接受负值。正值超过数组长度，数组不会被搜索，返回false。负值绝对值超过长数组度，重置从0开始搜索。</li></ul><p>是否改变原数组：❌</p><p>返回值：默认值为0，参数表示搜索的起始位置，接受负值。正值超过数组长度，数组不会被搜索，返回false。负值绝对值超过长数组度，重置从0开始搜索。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);     </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);     </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p><strong>includes方法是为了弥补indexOf方法的缺陷而出现的:</strong></p><ol><li>indexOf方法不能识别<code>NaN</code></li><li>indexOf方法检查是否包含某个值不够语义化，需要判断是否不等于<code>-1</code>，表达不够直观</li></ol><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>这次就仅介绍这些方法</p><p>如果大家有建议或者发现问题的都可以在下面评论中指出</p>`,184),t=[e];function c(y,E,i,F,d,u){return a(),n("div",null,t)}const r=s(o,[["render",c]]),h=Object.freeze(Object.defineProperty({__proto__:null,__pageData:p,default:r},Symbol.toStringTag,{value:"Module"}));export{h as _,p as __pageData,r as default};
