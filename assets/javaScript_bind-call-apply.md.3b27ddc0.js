import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.12b7deed.js";const p=JSON.parse('{"title":"bind、call、apply的区别与用法？","description":"","frontmatter":{"title":"bind、call、apply的区别与用法？","head":[["meta",{"name":"og:title","content":"bind、call、apply的区别与用法？ | VitePress"}]]},"headers":[],"relativePath":"javaScript/bind-call-apply.md","filePath":"javaScript/bind-call-apply.md","lastUpdated":1698918793000}'),o={name:"javaScript/bind-call-apply.md"},e=l(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>我们在看一些插件的时候，经常会用到这 3 个函数，那么他们具体的用途是什么呢？区别又是什么呢？我们先看看下面一段代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;小白&#39;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> name: </span><span style="color:#9ECBFF;">&#39;小明&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> getName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj.getName</span></span>
<span class="line"><span style="color:#E1E4E8;">obj.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">// obj, 小明</span></span>
<span class="line"><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">// window,小白</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;小白&#39;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> name: </span><span style="color:#032F62;">&#39;小明&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> getName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj.getName</span></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">// obj, 小明</span></span>
<span class="line"><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">// window,小白</span></span></code></pre></div><p>是不是很神奇，同一个函数，执行的结果不一样，这里涉及到一个<code>this</code>的指向问题。</p><h2 id="函数中的this指向" tabindex="-1">函数中的<code>this</code>指向 <a class="header-anchor" href="#函数中的this指向" aria-label="Permalink to &quot;函数中的\`this\`指向&quot;">​</a></h2><p><code>js</code>中一个普通函数<code>this</code>的指向与其本身无关，只与<strong>调用该函数的对象有关</strong>。根据这个规则，我们回到上面的问题，<code>obj.getName</code>调用<code>getName</code>函数的对象是<code>obj</code>,所以<code>this</code>指向了<code>obj</code>对象，那么得到的<code>obj.name</code>为小明；而<code>getName()</code>是直接调用的函数，实际上是<code>window.geName()</code>是<code>window</code>对象在调用函数，<code>this</code>则指向<code>window</code>对象。（<strong>use strict 严格模式下</strong>，全局 this 是 undefined，而不是<code>window</code>）。 关于<code>this</code>的指向这里不做具体讲解，毕竟这是个复杂的问题，后面再分情况讲解，毕竟这也是一个高频面试题。</p><h2 id="bind、call、apply-的作用" tabindex="-1">bind、call、apply 的作用 <a class="header-anchor" href="#bind、call、apply-的作用" aria-label="Permalink to &quot;bind、call、apply 的作用&quot;">​</a></h2><p>这 3 个函数的作用是，改变一个函数在执行时<code>this</code>的指向。我们来改造上面的代码。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;小白&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> name: </span><span style="color:#9ECBFF;">&#39;小明&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {name: </span><span style="color:#9ECBFF;">&#39;小花&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> getName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj.getName;</span></span>
<span class="line"><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// window,小白</span></span>
<span class="line"><span style="color:#E1E4E8;">obj.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// obj, 小明</span></span>
<span class="line"><span style="color:#E1E4E8;">getName.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(obj);</span></span>
<span class="line"><span style="color:#6A737D;">// obj,小明</span></span>
<span class="line"><span style="color:#E1E4E8;">getName.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(obj1);</span></span>
<span class="line"><span style="color:#6A737D;">// obj1,小花</span></span>
<span class="line"><span style="color:#E1E4E8;">getName.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(obj)();</span></span>
<span class="line"><span style="color:#6A737D;">// obj,小明</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;小白&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> name: </span><span style="color:#032F62;">&#39;小明&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {name: </span><span style="color:#032F62;">&#39;小花&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> getName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj.getName;</span></span>
<span class="line"><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// window,小白</span></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// obj, 小明</span></span>
<span class="line"><span style="color:#24292E;">getName.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(obj);</span></span>
<span class="line"><span style="color:#6A737D;">// obj,小明</span></span>
<span class="line"><span style="color:#24292E;">getName.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(obj1);</span></span>
<span class="line"><span style="color:#6A737D;">// obj1,小花</span></span>
<span class="line"><span style="color:#24292E;">getName.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(obj)();</span></span>
<span class="line"><span style="color:#6A737D;">// obj,小明</span></span></code></pre></div><p>可以看到，当我们改用<code>apply</code>去调用函数时，不管其所在的作用域，我们的<code>this</code>指向<code>bind,apply,call</code>函数接受的第一个参数。</p><h2 id="相同点与不同点" tabindex="-1">相同点与不同点 <a class="header-anchor" href="#相同点与不同点" aria-label="Permalink to &quot;相同点与不同点&quot;">​</a></h2><p>相同点：三个函数都是为了改变被调用函数的<code>this</code>指向，都指向接受的第一个参数。 不同点：</p><ol><li><code>apply</code>和<code>call</code>都是直接调用函数，而<code>bind</code>则是先将函数暂存起来，需要再单独调用一次。</li><li><code>apply</code>和<code>call</code>第一个参数一样，都是要绑定给 this 的值，如果这个值为<code>null</code>或者<code>undefined</code>，则为<code>window</code>对象。他们的区别在第二个参数上：当函数需要传递多个变量时, <code>apply</code>可以接受一个数组作为参数输入, <code>call</code> 则是接受一系列的单独变量。当参数个数已知的时候可以用<code>call</code>，而当参数个数不确定的时候可以用<code>apply</code>。</li><li><code>bind</code>和<code>call</code>很相似，第一个参数是<code>this</code>的指向，从第二个参数开始是接收的参数列表。区别在于<code>bind</code>方法返回值是函数以及<code>bind</code>接收的参数列表的使用。<code>bind</code> 方法不会立即执行，而是返回一个改变了上下文 <code>this</code>后的函数。而不会影响原函数中的<code>this</code>指向。</li></ol><p>最后我们再看一个完整的实例来表现这个三个函数的用途和区别：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sub</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(sub)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sub</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;"> sub.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> sub.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;"> sub.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sub</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(sub)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sub</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;"> sub.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> sub.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;"> sub.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)()</span></span></code></pre></div><p>可以看到，<code>call</code>和<code>apply</code>参数不一样，而<code>bind</code>参数和<code>call</code>一样，但还需要单独调用一下函数。</p><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><h3 id="求数组中的最大和最小值" tabindex="-1">求数组中的最大和最小值 <a class="header-anchor" href="#求数组中的最大和最小值" aria-label="Permalink to &quot;求数组中的最大和最小值&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">46</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> max </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.max.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,arr);</span><span style="color:#6A737D;">//46</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> min </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.min.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,arr);</span><span style="color:#6A737D;">//0</span></span>
<span class="line"><span style="color:#6A737D;">// 等价于</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> max </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">arr);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> min </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">arr);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">46</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> max </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.max.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,arr);</span><span style="color:#6A737D;">//46</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> min </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.min.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,arr);</span><span style="color:#6A737D;">//0</span></span>
<span class="line"><span style="color:#6A737D;">// 等价于</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> max </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> min </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr);</span></span></code></pre></div><blockquote><p>这里利用<code>apply</code>的第二个参数是接受一个数组，而在调用函数的时候会自动展开这个数组，而<code>max和min</code>方法接受参数的形式是(1,2,3,4)。</p></blockquote><h3 id="将-arguments-等类数组转换为数组" tabindex="-1">将 arguments 等类数组转换为数组 <a class="header-anchor" href="#将-arguments-等类数组转换为数组" aria-label="Permalink to &quot;将 arguments 等类数组转换为数组&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> trueArr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.slice.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> trueArr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.slice.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="判断变量类型" tabindex="-1">判断变量类型 <a class="header-anchor" href="#判断变量类型" aria-label="Permalink to &quot;判断变量类型&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(obj) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;[object Array]&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">([]) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;dot&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(obj) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;[object Array]&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">([]) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;dot&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h3 id="使用-log-代替-console-log" tabindex="-1">使用 log 代替 console.log <a class="header-anchor" href="#使用-log-代替-console-log" aria-label="Permalink to &quot;使用 log 代替 console.log&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.log.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(console, </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  console.log.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(console, </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上用途参考：<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2Fbc541afad6ee" title="https://www.jianshu.com/p/bc541afad6ee" target="_blank" rel="noreferrer">call、apply 和 bind 方法的用法以及区别</a></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><code>call</code>、<code>apply</code>、<code>bind</code>都是为了改变当前要执行函数<code>this</code>指向，由第一个参数决定，为<code>null</code>或者<code>undefined</code>时则为<code>window</code>对象。<code>call</code>和<code>apply</code>的参数有区别。而<code>bind</code>不是马上执行函数，而是返回该函数和保留该函数的执行上下文。</p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><p><a href="https://juejin.cn/post/6844904164514856973" target="_blank" rel="noreferrer">bind、call、apply的区别与用法？</a></p>`,31),c=[e];function t(y,E,i,d,F,h){return a(),n("div",null,c)}const r=s(o,[["render",t]]),u=Object.freeze(Object.defineProperty({__proto__:null,__pageData:p,default:r},Symbol.toStringTag,{value:"Module"}));export{u as _,p as __pageData,r as default};
