import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.12b7deed.js";const p=JSON.parse('{"title":"Vue源码解析之虚拟DOM和diff算法","description":"","frontmatter":{"title":"Vue源码解析之虚拟DOM和diff算法","head":[["meta",{"name":"og:title","content":"Vue源码解析之虚拟DOM和diff算法 | VitePress"}]]},"headers":[],"relativePath":"vue2/dom-diff.md","filePath":"vue2/dom-diff.md","lastUpdated":1698918793000}'),o={name:"vue2/dom-diff.md"},e=l(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>在Vue中虚拟DOM和diff算法时面试的常考题，为了面试你可能粗浅了解过一些虚拟DOM和diff算法的相关知识或者一些公众号的文章，至少见过下面的图片</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57ba51b25b1c48d681cc566029ea72aa~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>但为了面试而去应付的了解，真能能让我们能够认识到虚拟DOM和diff算法嘛？</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b84b5f7194784ae09f59a868d55d2d03~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>本章的目的主要是为了更好的了解虚拟DOM和diff算法？如何弄懂？手动将底层代码敲出来</p><h2 id="先简单介绍一下虚拟dom和diff算法" tabindex="-1">先简单介绍一下虚拟DOM和diff算法 <a class="header-anchor" href="#先简单介绍一下虚拟dom和diff算法" aria-label="Permalink to &quot;先简单介绍一下虚拟DOM和diff算法&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2b25f64a62644819592ffd3b44ae333~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>图中显示，我们有三个改动的地方，那我们要如何改造呢？</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a261b0fef4584a419d432841a1ffffd9~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>这样代价太高了，这时候就可以利用diff算法。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/def1807395144e4eb84fef0426c936a0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>这就好比我们DOM上的操作.</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de6219fec9e044278205835e5f9d3520~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>真实DOM变为虚拟DOM，标签是sel、标签上的参数是data、子元素是children、文本是text。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57db44ffd0b84bc6b150f4978df5b2ee~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><strong>diff算法是发生在虚拟dom上的</strong>，通过在虚拟dom上的比较。算出如何最小量更新，最后反映在真实DOM上。 <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/639385c67d1a4f5ab554f45d72f83032~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="snabbdom" tabindex="-1">snabbdom <a class="header-anchor" href="#snabbdom" aria-label="Permalink to &quot;snabbdom&quot;">​</a></h2><p>snabbdom是著名的虚拟DOM库，是diff算法的鼻祖，Vue源码借鉴了snabbdom；</p><p>官方git：<a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noreferrer">https://github.com/snabbdom/snabbdom</a></p><h2 id="项目搭建" tabindex="-1">项目搭建 <a class="header-anchor" href="#项目搭建" aria-label="Permalink to &quot;项目搭建&quot;">​</a></h2><p>• snabbdom库是DOM库，当然不能在nodejs环境运行，所以我们需要搭建webpack和webpack-dev-server开发环境，好消息是不需要安装任何loader</p><p>• 这里需要注意，必须安装最新版webpack@5，不能安装webpack@4，这是因为webpack4没有读取身份证中exports的能力，建议大家使用这样的版本：</p><p><code>npm i -D webpack@5.11.0 webpack-cli@3.3.12 webpack-dev-server@3.11.0</code></p><p>• 参考webpack官网，书写好webpack.config.js文件</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    entry:</span><span style="color:#9ECBFF;">&quot;./src/index.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    output:{</span></span>
<span class="line"><span style="color:#E1E4E8;">        publicPath:</span><span style="color:#9ECBFF;">&quot;zxx&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        filename:</span><span style="color:#9ECBFF;">&quot;bundle.js&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    devServer:{</span></span>
<span class="line"><span style="color:#E1E4E8;">        port:</span><span style="color:#79B8FF;">8080</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        contentBase:</span><span style="color:#9ECBFF;">&quot;www&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    entry:</span><span style="color:#032F62;">&quot;./src/index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    output:{</span></span>
<span class="line"><span style="color:#24292E;">        publicPath:</span><span style="color:#032F62;">&quot;zxx&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        filename:</span><span style="color:#032F62;">&quot;bundle.js&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    devServer:{</span></span>
<span class="line"><span style="color:#24292E;">        port:</span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        contentBase:</span><span style="color:#032F62;">&quot;www&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>snabbdom的测试环境就搭建好了，下面我们来用一下snabbdom的用力吧，可以直接去他的官网看一下</p><h2 id="体验h函数" tabindex="-1">体验h函数 <a class="header-anchor" href="#体验h函数" aria-label="Permalink to &quot;体验h函数&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;snabbdom&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vnode1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ul&#39;</span><span style="color:#E1E4E8;">, {}, [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;li&#39;</span><span style="color:#E1E4E8;">, { key: </span><span style="color:#9ECBFF;">&#39;A&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;A&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;li&#39;</span><span style="color:#E1E4E8;">, { key: </span><span style="color:#9ECBFF;">&#39;B&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;B&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;li&#39;</span><span style="color:#E1E4E8;">, { key: </span><span style="color:#9ECBFF;">&#39;C&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;C&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;li&#39;</span><span style="color:#E1E4E8;">, { key: </span><span style="color:#9ECBFF;">&#39;D&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;D&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(vnode1)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { h } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;snabbdom&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vnode1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ul&#39;</span><span style="color:#24292E;">, {}, [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;li&#39;</span><span style="color:#24292E;">, { key: </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;"> }, </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;li&#39;</span><span style="color:#24292E;">, { key: </span><span style="color:#032F62;">&#39;B&#39;</span><span style="color:#24292E;"> }, </span><span style="color:#032F62;">&#39;B&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;li&#39;</span><span style="color:#24292E;">, { key: </span><span style="color:#032F62;">&#39;C&#39;</span><span style="color:#24292E;"> }, </span><span style="color:#032F62;">&#39;C&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;li&#39;</span><span style="color:#24292E;">, { key: </span><span style="color:#032F62;">&#39;D&#39;</span><span style="color:#24292E;"> }, </span><span style="color:#032F62;">&#39;D&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(vnode1)</span></span></code></pre></div><p>打印结果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df1b795e563d40b4b2480a1b4e09c59a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="体验diff算法" tabindex="-1">体验diff算法 <a class="header-anchor" href="#体验diff算法" aria-label="Permalink to &quot;体验diff算法&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    init,</span></span>
<span class="line"><span style="color:#E1E4E8;">    classModule,</span></span>
<span class="line"><span style="color:#E1E4E8;">    propsModule,</span></span>
<span class="line"><span style="color:#E1E4E8;">    styleModule,</span></span>
<span class="line"><span style="color:#E1E4E8;">    eventListenersModule,</span></span>
<span class="line"><span style="color:#E1E4E8;">    h,</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;snabbdom&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 得到盒子和按钮</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">container</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;container&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">btn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;btn&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建出patch函数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">patch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">([classModule, propsModule, styleModule, eventListenersModule]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vnode1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ul&#39;</span><span style="color:#E1E4E8;">, {}, [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;li&#39;</span><span style="color:#E1E4E8;">, { key: </span><span style="color:#9ECBFF;">&#39;A&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;A&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;li&#39;</span><span style="color:#E1E4E8;">, { key: </span><span style="color:#9ECBFF;">&#39;B&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;B&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;li&#39;</span><span style="color:#E1E4E8;">, { key: </span><span style="color:#9ECBFF;">&#39;C&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;C&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;li&#39;</span><span style="color:#E1E4E8;">, { key: </span><span style="color:#9ECBFF;">&#39;D&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;D&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">patch</span><span style="color:#E1E4E8;">(container, vnode1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vnode2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ul&#39;</span><span style="color:#E1E4E8;">, {}, [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;li&#39;</span><span style="color:#E1E4E8;">, { key: </span><span style="color:#9ECBFF;">&#39;D&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;D&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;li&#39;</span><span style="color:#E1E4E8;">, { key: </span><span style="color:#9ECBFF;">&#39;A&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;A&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;li&#39;</span><span style="color:#E1E4E8;">, { key: </span><span style="color:#9ECBFF;">&#39;C&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;C&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;li&#39;</span><span style="color:#E1E4E8;">, { key: </span><span style="color:#9ECBFF;">&#39;B&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;B&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 点击按钮时，将vnode1变为vnode2</span></span>
<span class="line"><span style="color:#E1E4E8;">btn.</span><span style="color:#B392F0;">onclick</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">patch</span><span style="color:#E1E4E8;">(vnode1, vnode2);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    init,</span></span>
<span class="line"><span style="color:#24292E;">    classModule,</span></span>
<span class="line"><span style="color:#24292E;">    propsModule,</span></span>
<span class="line"><span style="color:#24292E;">    styleModule,</span></span>
<span class="line"><span style="color:#24292E;">    eventListenersModule,</span></span>
<span class="line"><span style="color:#24292E;">    h,</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;snabbdom&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 得到盒子和按钮</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">container</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;container&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">btn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;btn&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建出patch函数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">patch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">([classModule, propsModule, styleModule, eventListenersModule]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vnode1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ul&#39;</span><span style="color:#24292E;">, {}, [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;li&#39;</span><span style="color:#24292E;">, { key: </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;"> }, </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;li&#39;</span><span style="color:#24292E;">, { key: </span><span style="color:#032F62;">&#39;B&#39;</span><span style="color:#24292E;"> }, </span><span style="color:#032F62;">&#39;B&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;li&#39;</span><span style="color:#24292E;">, { key: </span><span style="color:#032F62;">&#39;C&#39;</span><span style="color:#24292E;"> }, </span><span style="color:#032F62;">&#39;C&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;li&#39;</span><span style="color:#24292E;">, { key: </span><span style="color:#032F62;">&#39;D&#39;</span><span style="color:#24292E;"> }, </span><span style="color:#032F62;">&#39;D&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">patch</span><span style="color:#24292E;">(container, vnode1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vnode2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ul&#39;</span><span style="color:#24292E;">, {}, [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;li&#39;</span><span style="color:#24292E;">, { key: </span><span style="color:#032F62;">&#39;D&#39;</span><span style="color:#24292E;"> }, </span><span style="color:#032F62;">&#39;D&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;li&#39;</span><span style="color:#24292E;">, { key: </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;"> }, </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;li&#39;</span><span style="color:#24292E;">, { key: </span><span style="color:#032F62;">&#39;C&#39;</span><span style="color:#24292E;"> }, </span><span style="color:#032F62;">&#39;C&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;li&#39;</span><span style="color:#24292E;">, { key: </span><span style="color:#032F62;">&#39;B&#39;</span><span style="color:#24292E;"> }, </span><span style="color:#032F62;">&#39;B&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 点击按钮时，将vnode1变为vnode2</span></span>
<span class="line"><span style="color:#24292E;">btn.</span><span style="color:#6F42C1;">onclick</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">patch</span><span style="color:#24292E;">(vnode1, vnode2);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>下面我们先手写H函数吧，一个个来。</p><h2 id="h函数" tabindex="-1">h函数 <a class="header-anchor" href="#h函数" aria-label="Permalink to &quot;h函数&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> vnode </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./vnode&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// 编写一个低配版本的h函数，这个函数必须接受3个参数，缺一不可</span></span>
<span class="line"><span style="color:#6A737D;">// 相当于它的重载功能较弱。</span></span>
<span class="line"><span style="color:#6A737D;">// 也就是说，调用的时候形态必须是下面的三种之一：</span></span>
<span class="line"><span style="color:#6A737D;">// 形态① h(&#39;div&#39;, {}, &#39;文字&#39;)</span></span>
<span class="line"><span style="color:#6A737D;">// 形态② h(&#39;div&#39;, {}, [])</span></span>
<span class="line"><span style="color:#6A737D;">// 形态③ h(&#39;div&#39;, {}, h())</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">sel</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;对不起，h函数必须传入3个函数，我们是低配版的h函数&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//检查参数c的类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;number&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vnode</span><span style="color:#E1E4E8;">(sel, data, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, c, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(c)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> c[i] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> c[i].</span><span style="color:#B392F0;">hasOwnProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;sel&#39;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;传入的数组参数中有项不是h函数&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            children.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(c[i])</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vnode</span><span style="color:#E1E4E8;">(sel, data, children, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;object&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> c.</span><span style="color:#B392F0;">hasOwnProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sel&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [c]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vnode</span><span style="color:#E1E4E8;">(sel, data, children, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;传入的第三个参数类型不对&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> vnode </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./vnode&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// 编写一个低配版本的h函数，这个函数必须接受3个参数，缺一不可</span></span>
<span class="line"><span style="color:#6A737D;">// 相当于它的重载功能较弱。</span></span>
<span class="line"><span style="color:#6A737D;">// 也就是说，调用的时候形态必须是下面的三种之一：</span></span>
<span class="line"><span style="color:#6A737D;">// 形态① h(&#39;div&#39;, {}, &#39;文字&#39;)</span></span>
<span class="line"><span style="color:#6A737D;">// 形态② h(&#39;div&#39;, {}, [])</span></span>
<span class="line"><span style="color:#6A737D;">// 形态③ h(&#39;div&#39;, {}, h())</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">sel</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">, </span><span style="color:#E36209;">c</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;对不起，h函数必须传入3个函数，我们是低配版的h函数&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//检查参数c的类型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;number&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vnode</span><span style="color:#24292E;">(sel, data, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, c, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(c)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> c[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> c[i].</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;sel&#39;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;传入的数组参数中有项不是h函数&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            children.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(c[i])</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vnode</span><span style="color:#24292E;">(sel, data, children, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;object&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> c.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sel&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [c]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vnode</span><span style="color:#24292E;">(sel, data, children, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;传入的第三个参数类型不对&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样函数主要是用来模板的转为我们所需要的虚拟DOM对象参数</p><h2 id="vnode函数" tabindex="-1">vnode函数 <a class="header-anchor" href="#vnode函数" aria-label="Permalink to &quot;vnode函数&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">sel</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">children</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">elm</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.key;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        sel,</span></span>
<span class="line"><span style="color:#E1E4E8;">        data,</span></span>
<span class="line"><span style="color:#E1E4E8;">        children,</span></span>
<span class="line"><span style="color:#E1E4E8;">        text,</span></span>
<span class="line"><span style="color:#E1E4E8;">        elm,</span></span>
<span class="line"><span style="color:#E1E4E8;">        key</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">sel</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">, </span><span style="color:#E36209;">children</span><span style="color:#24292E;">, </span><span style="color:#E36209;">text</span><span style="color:#24292E;">, </span><span style="color:#E36209;">elm</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.key;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        sel,</span></span>
<span class="line"><span style="color:#24292E;">        data,</span></span>
<span class="line"><span style="color:#24292E;">        children,</span></span>
<span class="line"><span style="color:#24292E;">        text,</span></span>
<span class="line"><span style="color:#24292E;">        elm,</span></span>
<span class="line"><span style="color:#24292E;">        key</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>返回虚拟DOM结构对象</p><h2 id="patch函数" tabindex="-1">patch函数 <a class="header-anchor" href="#patch函数" aria-label="Permalink to &quot;patch函数&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> vnode </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./vnode&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> createElement </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./createElement&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> patchVnode </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./patchVnode&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">patch</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">oldVnode</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">newVnode</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//判断第一个传入参数，是DOM节点还是虚拟节点？</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (oldVnode.sel </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> oldVnode.sel </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//传入的第一个参数是DOM节点，此时要包装为虚拟节点</span></span>
<span class="line"><span style="color:#E1E4E8;">        oldVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vnode</span><span style="color:#E1E4E8;">(oldVnode.tagName.</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">(), {}, {}, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, oldVnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (oldVnode.key </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> newVnode.key </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> oldVnode.sel </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> newVnode.sel) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;是同一个节点&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldVnode,newVnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;不是同一个节点。暴力插入新的，删除旧的&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newVnodeElm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(newVnode)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (oldVnode.elm.parentNode </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> newVnodeElm) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            oldVnode.elm.parentNode.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">(newVnodeElm, oldVnode.elm)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// console.log(&quot;旧节点打印&quot;,oldVnode.elm)</span></span>
<span class="line"><span style="color:#E1E4E8;">        oldVnode.elm.parentNode </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> oldVnode.elm.parentNode.</span><span style="color:#B392F0;">removeChild</span><span style="color:#E1E4E8;">(oldVnode.elm)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> vnode </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./vnode&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> createElement </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./createElement&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> patchVnode </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./patchVnode&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">patch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">oldVnode</span><span style="color:#24292E;">, </span><span style="color:#E36209;">newVnode</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//判断第一个传入参数，是DOM节点还是虚拟节点？</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (oldVnode.sel </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> oldVnode.sel </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//传入的第一个参数是DOM节点，此时要包装为虚拟节点</span></span>
<span class="line"><span style="color:#24292E;">        oldVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vnode</span><span style="color:#24292E;">(oldVnode.tagName.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">(), {}, {}, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, oldVnode)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (oldVnode.key </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> newVnode.key </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> oldVnode.sel </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> newVnode.sel) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;是同一个节点&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">patchVnode</span><span style="color:#24292E;">(oldVnode,newVnode)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;不是同一个节点。暴力插入新的，删除旧的&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newVnodeElm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(newVnode)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (oldVnode.elm.parentNode </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> newVnodeElm) {</span></span>
<span class="line"><span style="color:#24292E;">            oldVnode.elm.parentNode.</span><span style="color:#6F42C1;">insertBefore</span><span style="color:#24292E;">(newVnodeElm, oldVnode.elm)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// console.log(&quot;旧节点打印&quot;,oldVnode.elm)</span></span>
<span class="line"><span style="color:#24292E;">        oldVnode.elm.parentNode </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> oldVnode.elm.parentNode.</span><span style="color:#6F42C1;">removeChild</span><span style="color:#24292E;">(oldVnode.elm)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>diff算法入口；渲染虚拟DOM上树，通过去比较，实现最小量更新，流程如下图：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94fa1a6a259f4439833a5889986f9a3f~tplv-k3u1fbpfcp-watermark.image?" alt="流程图.png"></p><h2 id="createelement函数" tabindex="-1">createElement函数 <a class="header-anchor" href="#createelement函数" aria-label="Permalink to &quot;createElement函数&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//将vnode创建为真实dom</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">vnode</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> domNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(vnode.sel)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//判断是有子节点还是纯文本</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (vnode.text </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (vnode.children </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> vnode.children.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        domNode.innerText </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.text</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(vnode.children) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> vnode.children.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> vnode.children.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> ch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.children[i]</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> chDom </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(ch)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            domNode.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(chDom)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    vnode.elm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> domNode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> vnode.elm</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//将vnode创建为真实dom</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#E36209;">vnode</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> domNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(vnode.sel)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//判断是有子节点还是纯文本</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (vnode.text </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (vnode.children </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> vnode.children.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">        domNode.innerText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.text</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(vnode.children) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> vnode.children.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> vnode.children.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> ch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.children[i]</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> chDom </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(ch)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            domNode.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(chDom)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    vnode.elm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> domNode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> vnode.elm</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>根据虚拟DOM创建真实DOM</p><h2 id="patchvnode函数" tabindex="-1">patchVnode函数 <a class="header-anchor" href="#patchvnode函数" aria-label="Permalink to &quot;patchVnode函数&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> createElement </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./createElement&quot;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> updateChildren </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./updateChildren&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//对比同一个虚拟节点</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">oldVnode</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">newVnode</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(oldVnode </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> newVnode ) </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;我捡来了&quot;</span><span style="color:#E1E4E8;">,oldVnode,newVnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(newVnode.text  </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (newVnode.children </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> newVnode.children.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)){</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;新vnode有text属性&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(newVnode.text </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> oldVnode.text){</span></span>
<span class="line"><span style="color:#E1E4E8;">            oldVnode.elm.innerText </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newVnode.text</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;新vnode没有text属性&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(oldVnode.children </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> oldVnode.children.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;新老vnode都有children&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">updateChildren</span><span style="color:#E1E4E8;">(oldVnode.elm,oldVnode.children,newVnode.children)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//老的没有children 新的有children</span></span>
<span class="line"><span style="color:#E1E4E8;">            oldVnode.elm.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">newVnode.children.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> dom </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(newVnode.children[i])</span></span>
<span class="line"><span style="color:#E1E4E8;">                oldVnode.elm.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(dom)</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> createElement </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./createElement&quot;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> updateChildren </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./updateChildren&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//对比同一个虚拟节点</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">patchVnode</span><span style="color:#24292E;">(</span><span style="color:#E36209;">oldVnode</span><span style="color:#24292E;">, </span><span style="color:#E36209;">newVnode</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(oldVnode </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> newVnode ) </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;我捡来了&quot;</span><span style="color:#24292E;">,oldVnode,newVnode)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(newVnode.text  </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (newVnode.children </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> newVnode.children.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)){</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;新vnode有text属性&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(newVnode.text </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> oldVnode.text){</span></span>
<span class="line"><span style="color:#24292E;">            oldVnode.elm.innerText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newVnode.text</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;新vnode没有text属性&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(oldVnode.children </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> oldVnode.children.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;新老vnode都有children&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">updateChildren</span><span style="color:#24292E;">(oldVnode.elm,oldVnode.children,newVnode.children)</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//老的没有children 新的有children</span></span>
<span class="line"><span style="color:#24292E;">            oldVnode.elm.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">newVnode.children.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> dom </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(newVnode.children[i])</span></span>
<span class="line"><span style="color:#24292E;">                oldVnode.elm.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(dom)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>用于对比同一节点的是否有变化</p><h2 id="updatechildren函数" tabindex="-1">updateChildren函数 <a class="header-anchor" href="#updatechildren函数" aria-label="Permalink to &quot;updateChildren函数&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> patchVnode </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./patchVnode&quot;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> createElement </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./createElement&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//判断是否为同一个虚拟节点</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkSameVnode</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a.sel </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> b.sel </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> a.key </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> b.key</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateChildren</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">parentElm</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldCh</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">newCh</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(parentElm, oldCh, newCh)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//旧前</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> oldStartIdx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//新前</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newStartIdx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//旧后</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> oldEndIdx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//新后</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newEndIdx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//旧前节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> oldStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//旧后节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> oldEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[oldEndIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//新前节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//新后节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[newEndIdx]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> keyMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (oldStartIdx </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> oldEndIdx </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> newStartIdx </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> newEndIdx) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// console.log(&quot;☆&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;首先不是判断是否命中的，而是略过已经加undefined标记的项&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(oldStartVnode </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> oldCh[oldStartIdx] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            oldStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">oldStartIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(oldEndVnode </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> oldCh[oldEndIdx] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            oldEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">oldEndIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(newStartVnode </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> newCh[newStartIdx] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            newStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">newStartIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(newEndVnode </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> newCh[newEndIdx] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            newEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">newEndIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">checkSameVnode</span><span style="color:#E1E4E8;">(oldStartVnode, newStartVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;①新前与旧前命中&quot;</span><span style="color:#E1E4E8;">, oldStartVnode, newStartVnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldStartVnode, newStartVnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">            oldStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">oldStartIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">            newStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">newStartIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">checkSameVnode</span><span style="color:#E1E4E8;">(oldEndVnode, newStartVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;②新后与旧后命中&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldEndVnode, newEndVnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">            oldEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">oldEndIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">            newEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">newEndIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">checkSameVnode</span><span style="color:#E1E4E8;">(oldStartVnode, newEndVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;③新后与旧前命中&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldStartVnode, newEndVnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 当③新后与旧前命中的时候，此时要移动节点。移动新前指向的这个节点到老节点的旧后的后面</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//为什么是移到老老节点的旧后（此旧后非老节点中最后一个）的后面呢，而不是直接老节点中最后一个节点的的后面？</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//因为如果说前面已经命中过了新后与旧后，你的新后和旧后的下标是不是移动了，如果你还直接老节点的最后一个，顺序就不是正常的效果了</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//譬如A、B、C、D和A、C、B、D 。A和B分别命中新前与旧前 、新后与新后。当B的时候只能命中到新后与旧前。这是如果插到老节点的最后一个节点的后面，输出顺序就会变为A、C、D、B了</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如何移动节点？？只要你插入一个已经在DOM树上的节点，它就会被移动</span></span>
<span class="line"><span style="color:#E1E4E8;">            parentElm.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">(oldStartVnode.elm, oldEndVnode.elm.nextSibling)</span></span>
<span class="line"><span style="color:#E1E4E8;">            oldStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">oldStartIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">            newEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">newEndIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">checkSameVnode</span><span style="color:#E1E4E8;">(oldEndVnode, newStartVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldEndVnode, newStartVnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">            parentElm.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">(oldEndVnode.elm, oldStartVnode.elm)</span></span>
<span class="line"><span style="color:#E1E4E8;">            oldEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">oldEndIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">            newStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">newStartIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//四种都没有命中</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//制作keyMap一个映射对象，这样就不用每次都遍历老对象了</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">keyMap) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                keyMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldStartIdx; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> oldEndIdx; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[i]</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (key </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        keyMap[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(keyMap)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//寻找当前这项（newStartIdx）在keyMap中的映射的位置序号</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">idxInOld</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> keyMap[newStartVnode.key]</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (idxInOld </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 判断，如果idxInOld是undefined表示它是全新的项</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 被加入的项（就是newStartVnode这项)现不是真正的DOM节点</span></span>
<span class="line"><span style="color:#E1E4E8;">                parentElm.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(newStartVnode), oldStartVnode.elm)</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//如果不是全新项，则需要进行移动</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">elmToMove</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[idxInOld]</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(elmToMove, newStartVnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//把当前这项设置为undefined，表示我已经处理过这个了</span></span>
<span class="line"><span style="color:#E1E4E8;">                oldCh[idxInOld] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">                parentElm.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">(elmToMove.elm, oldStartVnode.elm)</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            newStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">newStartIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//继续看还有没有剩余的节点，循环结束了start 比old小</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(newStartIdx  </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> newEndIdx){</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;new还有剩余节点没有处理，要加项，要把所有的剩余节点放到oldStartIdx之前&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">newStartIdx;i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">newEndIdx;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            parentElm.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(newCh[i]),oldCh[oldStartIdx].elm)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(oldStartIdx </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> oldEndIdx){</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;old还有剩余节点没有处理，要删除项&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">oldStartIdx;i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">oldEndIdx;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(oldCh[i]){</span></span>
<span class="line"><span style="color:#E1E4E8;">                parentElm.</span><span style="color:#B392F0;">removeChild</span><span style="color:#E1E4E8;">(oldCh[i].elm)</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> patchVnode </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./patchVnode&quot;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> createElement </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./createElement&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//判断是否为同一个虚拟节点</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkSameVnode</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a.sel </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> b.sel </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> a.key </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> b.key</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateChildren</span><span style="color:#24292E;">(</span><span style="color:#E36209;">parentElm</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldCh</span><span style="color:#24292E;">, </span><span style="color:#E36209;">newCh</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(parentElm, oldCh, newCh)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//旧前</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> oldStartIdx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//新前</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newStartIdx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//旧后</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> oldEndIdx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//新后</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newEndIdx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//旧前节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> oldStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//旧后节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> oldEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[oldEndIdx]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//新前节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//新后节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[newEndIdx]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> keyMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (oldStartIdx </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> oldEndIdx </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> newStartIdx </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> newEndIdx) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// console.log(&quot;☆&quot;)</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;首先不是判断是否命中的，而是略过已经加undefined标记的项&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(oldStartVnode </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> oldCh[oldStartIdx] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            oldStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">oldStartIdx]</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(oldEndVnode </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> oldCh[oldEndIdx] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            oldEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">oldEndIdx]</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(newStartVnode </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> newCh[newStartIdx] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            newStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">newStartIdx]</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(newEndVnode </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> newCh[newEndIdx] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            newEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">newEndIdx]</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">checkSameVnode</span><span style="color:#24292E;">(oldStartVnode, newStartVnode)) {</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;①新前与旧前命中&quot;</span><span style="color:#24292E;">, oldStartVnode, newStartVnode)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">patchVnode</span><span style="color:#24292E;">(oldStartVnode, newStartVnode)</span></span>
<span class="line"><span style="color:#24292E;">            oldStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">oldStartIdx]</span></span>
<span class="line"><span style="color:#24292E;">            newStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">newStartIdx]</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">checkSameVnode</span><span style="color:#24292E;">(oldEndVnode, newStartVnode)) {</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;②新后与旧后命中&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">patchVnode</span><span style="color:#24292E;">(oldEndVnode, newEndVnode)</span></span>
<span class="line"><span style="color:#24292E;">            oldEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">oldEndIdx]</span></span>
<span class="line"><span style="color:#24292E;">            newEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">newEndIdx]</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">checkSameVnode</span><span style="color:#24292E;">(oldStartVnode, newEndVnode)) {</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;③新后与旧前命中&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">patchVnode</span><span style="color:#24292E;">(oldStartVnode, newEndVnode)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 当③新后与旧前命中的时候，此时要移动节点。移动新前指向的这个节点到老节点的旧后的后面</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//为什么是移到老老节点的旧后（此旧后非老节点中最后一个）的后面呢，而不是直接老节点中最后一个节点的的后面？</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//因为如果说前面已经命中过了新后与旧后，你的新后和旧后的下标是不是移动了，如果你还直接老节点的最后一个，顺序就不是正常的效果了</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//譬如A、B、C、D和A、C、B、D 。A和B分别命中新前与旧前 、新后与新后。当B的时候只能命中到新后与旧前。这是如果插到老节点的最后一个节点的后面，输出顺序就会变为A、C、D、B了</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如何移动节点？？只要你插入一个已经在DOM树上的节点，它就会被移动</span></span>
<span class="line"><span style="color:#24292E;">            parentElm.</span><span style="color:#6F42C1;">insertBefore</span><span style="color:#24292E;">(oldStartVnode.elm, oldEndVnode.elm.nextSibling)</span></span>
<span class="line"><span style="color:#24292E;">            oldStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">oldStartIdx]</span></span>
<span class="line"><span style="color:#24292E;">            newEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">newEndIdx]</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">checkSameVnode</span><span style="color:#24292E;">(oldEndVnode, newStartVnode)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">patchVnode</span><span style="color:#24292E;">(oldEndVnode, newStartVnode)</span></span>
<span class="line"><span style="color:#24292E;">            parentElm.</span><span style="color:#6F42C1;">insertBefore</span><span style="color:#24292E;">(oldEndVnode.elm, oldStartVnode.elm)</span></span>
<span class="line"><span style="color:#24292E;">            oldEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">oldEndIdx]</span></span>
<span class="line"><span style="color:#24292E;">            newStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">newStartIdx]</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//四种都没有命中</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//制作keyMap一个映射对象，这样就不用每次都遍历老对象了</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">keyMap) {</span></span>
<span class="line"><span style="color:#24292E;">                keyMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldStartIdx; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> oldEndIdx; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[i]</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (key </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        keyMap[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(keyMap)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//寻找当前这项（newStartIdx）在keyMap中的映射的位置序号</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">idxInOld</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> keyMap[newStartVnode.key]</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (idxInOld </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 判断，如果idxInOld是undefined表示它是全新的项</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 被加入的项（就是newStartVnode这项)现不是真正的DOM节点</span></span>
<span class="line"><span style="color:#24292E;">                parentElm.</span><span style="color:#6F42C1;">insertBefore</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(newStartVnode), oldStartVnode.elm)</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//如果不是全新项，则需要进行移动</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">elmToMove</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[idxInOld]</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">patchVnode</span><span style="color:#24292E;">(elmToMove, newStartVnode)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//把当前这项设置为undefined，表示我已经处理过这个了</span></span>
<span class="line"><span style="color:#24292E;">                oldCh[idxInOld] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span></span>
<span class="line"><span style="color:#24292E;">                parentElm.</span><span style="color:#6F42C1;">insertBefore</span><span style="color:#24292E;">(elmToMove.elm, oldStartVnode.elm)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            newStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">newStartIdx]</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//继续看还有没有剩余的节点，循环结束了start 比old小</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(newStartIdx  </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> newEndIdx){</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;new还有剩余节点没有处理，要加项，要把所有的剩余节点放到oldStartIdx之前&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">newStartIdx;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">newEndIdx;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            parentElm.</span><span style="color:#6F42C1;">insertBefore</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(newCh[i]),oldCh[oldStartIdx].elm)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(oldStartIdx </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> oldEndIdx){</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;old还有剩余节点没有处理，要删除项&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">oldStartIdx;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">oldEndIdx;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(oldCh[i]){</span></span>
<span class="line"><span style="color:#24292E;">                parentElm.</span><span style="color:#6F42C1;">removeChild</span><span style="color:#24292E;">(oldCh[i].elm)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个就是整个diff 算法中最为核心的部分，传说中的新前与旧前、新后与旧后、新后与旧前、新前与旧后的过程都在这里了。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb81a19522b847b09706aef0d71c6adc~tplv-k3u1fbpfcp-watermark.image?" alt="c8cfc549beca44be3707efc4369cab5.png"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>这样简易版的snabbdom就完成了。</p>`,55),t=[e];function c(E,y,i,d,F,h){return n(),a("div",null,t)}const r=s(o,[["render",c]]),C=Object.freeze(Object.defineProperty({__proto__:null,__pageData:p,default:r},Symbol.toStringTag,{value:"Module"}));export{C as _,p as __pageData,r as default};
